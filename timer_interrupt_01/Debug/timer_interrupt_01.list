
timer_interrupt_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002694  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002870  08002870  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002878  08002878  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800287c  0800287c  0001287c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  0800288c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800288c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca62  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad6  00000000  00000000  0002cae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000951  00000000  00000000  0002f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ef6  00000000  00000000  0002fae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e143  00000000  00000000  000509d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc9fe  00000000  00000000  0005eb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003210  00000000  00000000  0012b518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012e728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002840 	.word	0x08002840

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002840 	.word	0x08002840

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa50 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f80c 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8ca 	bl	80006a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f89e 	bl	8000650 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000514:	f000 f866 	bl	80005e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000518:	4801      	ldr	r0, [pc, #4]	; (8000520 <main+0x20>)
 800051a:	f001 fbc9 	bl	8001cb0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051e:	e7fe      	b.n	800051e <main+0x1e>
 8000520:	20000028 	.word	0x20000028

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2234      	movs	r2, #52	; 0x34
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 f958 	bl	80027e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b23      	ldr	r3, [pc, #140]	; (80005dc <SystemClock_Config+0xb8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a22      	ldr	r2, [pc, #136]	; (80005dc <SystemClock_Config+0xb8>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b20      	ldr	r3, [pc, #128]	; (80005dc <SystemClock_Config+0xb8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <SystemClock_Config+0xbc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <SystemClock_Config+0xbc>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <SystemClock_Config+0xbc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f89b 	bl	80016d4 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a4:	f000 f8ec 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fd3b 	bl	8001040 <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005d0:	f000 f8d6 	bl	8000780 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	; 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_TIM6_Init+0x64>)
 80005f4:	4a15      	ldr	r2, [pc, #84]	; (800064c <MX_TIM6_Init+0x68>)
 80005f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_TIM6_Init+0x64>)
 80005fa:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80005fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_TIM6_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_TIM6_Init+0x64>)
 8000608:	22c8      	movs	r2, #200	; 0xc8
 800060a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_TIM6_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_TIM6_Init+0x64>)
 8000614:	f001 fafc 	bl	8001c10 <HAL_TIM_Base_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800061e:	f000 f8af 	bl	8000780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <MX_TIM6_Init+0x64>)
 8000630:	f001 fd88 	bl	8002144 <HAL_TIMEx_MasterConfigSynchronization>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800063a:	f000 f8a1 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	40001000 	.word	0x40001000

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_USART2_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000688:	f001 fdec 	bl	8002264 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f875 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000070 	.word	0x20000070
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a25      	ldr	r2, [pc, #148]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_GPIO_Init+0xd0>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_GPIO_Init+0xd4>)
 8000730:	f000 fc52 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_GPIO_Init+0xd8>)
 800074c:	f000 fab0 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_GPIO_Init+0xd4>)
 8000768:	f000 faa2 	bl	8000cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020000 	.word	0x40020000
 800077c:	40020800 	.word	0x40020800

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_MspInit+0x4c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ca:	2007      	movs	r0, #7
 80007cc:	f000 fa2e 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_TIM_Base_MspInit+0x48>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d115      	bne.n	800081a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_TIM_Base_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <HAL_TIM_Base_MspInit+0x4c>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <HAL_TIM_Base_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2036      	movs	r0, #54	; 0x36
 8000810:	f000 fa17 	bl	8000c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000814:	2036      	movs	r0, #54	; 0x36
 8000816:	f000 fa30 	bl	8000c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40001000 	.word	0x40001000
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_UART_MspInit+0x84>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d12b      	bne.n	80008a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_UART_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0x88>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_UART_MspInit+0x88>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_UART_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <HAL_UART_MspInit+0x88>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_UART_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000886:	230c      	movs	r3, #12
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000896:	2307      	movs	r3, #7
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_UART_MspInit+0x8c>)
 80008a2:	f000 fa05 	bl	8000cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f8a0 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000914:	2120      	movs	r1, #32
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <TIM6_DAC_IRQHandler+0x18>)
 8000918:	f000 fb77 	bl	800100a <HAL_GPIO_TogglePin>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <TIM6_DAC_IRQHandler+0x1c>)
 800091e:	f001 fa37 	bl	8001d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40020000 	.word	0x40020000
 800092c:	20000028 	.word	0x20000028

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095a:	490e      	ldr	r1, [pc, #56]	; (8000994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000970:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800097e:	f7ff ffd7 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f001 ff39 	bl	80027f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fdbb 	bl	8000500 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000998:	08002880 	.word	0x08002880
  ldr r2, =_sbss
 800099c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a0:	200000b8 	.word	0x200000b8

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_Init+0x40>)
 80009b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_Init+0x40>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_Init+0x40>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f92b 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 f808 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fed6 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023c00 	.word	0x40023c00

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f943 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f90b 	bl	8000c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	200000b4 	.word	0x200000b4

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200000b4 	.word	0x200000b4

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	; (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff29 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff3e 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff8e 	bl	8000b80 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff31 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffa2 	bl	8000be8 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e165      	b.n	8000f98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8154 	bne.w	8000f92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d005      	beq.n	8000d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d130      	bne.n	8000d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d017      	beq.n	8000da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d123      	bne.n	8000df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	69b9      	ldr	r1, [r7, #24]
 8000df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80ae 	beq.w	8000f92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a5c      	ldr	r2, [pc, #368]	; (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b5a      	ldr	r3, [pc, #360]	; (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e52:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <HAL_GPIO_Init+0x308>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d025      	beq.n	8000eca <HAL_GPIO_Init+0x21a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4e      	ldr	r2, [pc, #312]	; (8000fbc <HAL_GPIO_Init+0x30c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d01f      	beq.n	8000ec6 <HAL_GPIO_Init+0x216>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4d      	ldr	r2, [pc, #308]	; (8000fc0 <HAL_GPIO_Init+0x310>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4c      	ldr	r2, [pc, #304]	; (8000fc4 <HAL_GPIO_Init+0x314>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x20e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4b      	ldr	r2, [pc, #300]	; (8000fc8 <HAL_GPIO_Init+0x318>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x20a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4a      	ldr	r2, [pc, #296]	; (8000fcc <HAL_GPIO_Init+0x31c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a49      	ldr	r2, [pc, #292]	; (8000fd0 <HAL_GPIO_Init+0x320>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x202>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00c      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e00a      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	e008      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	f002 0203 	and.w	r2, r2, #3
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000edc:	4935      	ldr	r1, [pc, #212]	; (8000fb4 <HAL_GPIO_Init+0x304>)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0e:	4a31      	ldr	r2, [pc, #196]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3301      	adds	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	f67f ae96 	bls.w	8000ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40021400 	.word	0x40021400
 8000fd0:	40021800 	.word	0x40021800
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff4:	e003      	b.n	8000ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800100a:	b480      	push	{r7}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800101c:	887a      	ldrh	r2, [r7, #2]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4013      	ands	r3, r2
 8001022:	041a      	lsls	r2, r3, #16
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43d9      	mvns	r1, r3
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	400b      	ands	r3, r1
 800102c:	431a      	orrs	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	619a      	str	r2, [r3, #24]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0cc      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001054:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d90c      	bls.n	800107c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001062:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800106a:	4b63      	ldr	r3, [pc, #396]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	d001      	beq.n	800107c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0b8      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001094:	4b59      	ldr	r3, [pc, #356]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4a58      	ldr	r2, [pc, #352]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800109e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ac:	4b53      	ldr	r3, [pc, #332]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b8:	4b50      	ldr	r3, [pc, #320]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	494d      	ldr	r1, [pc, #308]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d044      	beq.n	8001160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d107      	bne.n	80010ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	4b47      	ldr	r3, [pc, #284]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d119      	bne.n	800111e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e07f      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d003      	beq.n	80010fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fe:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d109      	bne.n	800111e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e06f      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e067      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111e:	4b37      	ldr	r3, [pc, #220]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f023 0203 	bic.w	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4934      	ldr	r1, [pc, #208]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	4313      	orrs	r3, r2
 800112e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001130:	f7ff fca0 	bl	8000a74 <HAL_GetTick>
 8001134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001136:	e00a      	b.n	800114e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001138:	f7ff fc9c 	bl	8000a74 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f241 3288 	movw	r2, #5000	; 0x1388
 8001146:	4293      	cmp	r3, r2
 8001148:	d901      	bls.n	800114e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e04f      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 020c 	and.w	r2, r3, #12
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	429a      	cmp	r2, r3
 800115e:	d1eb      	bne.n	8001138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d20c      	bcs.n	8001188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d001      	beq.n	8001188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e032      	b.n	80011ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	4916      	ldr	r1, [pc, #88]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	490e      	ldr	r1, [pc, #56]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011c6:	f000 f855 	bl	8001274 <HAL_RCC_GetSysClockFreq>
 80011ca:	4602      	mov	r2, r0
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	490a      	ldr	r1, [pc, #40]	; (8001200 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	5ccb      	ldrb	r3, [r1, r3]
 80011da:	fa22 f303 	lsr.w	r3, r2, r3
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_RCC_ClockConfig+0x1c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fc00 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00
 80011fc:	40023800 	.word	0x40023800
 8001200:	08002858 	.word	0x08002858
 8001204:	20000000 	.word	0x20000000
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_RCC_GetHCLKFreq+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000000 	.word	0x20000000

08001224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001228:	f7ff fff0 	bl	800120c <HAL_RCC_GetHCLKFreq>
 800122c:	4602      	mov	r2, r0
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	0a9b      	lsrs	r3, r3, #10
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	4903      	ldr	r1, [pc, #12]	; (8001248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800123a:	5ccb      	ldrb	r3, [r1, r3]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	08002868 	.word	0x08002868

0800124c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001250:	f7ff ffdc 	bl	800120c <HAL_RCC_GetHCLKFreq>
 8001254:	4602      	mov	r2, r0
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	0b5b      	lsrs	r3, r3, #13
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	4903      	ldr	r1, [pc, #12]	; (8001270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001262:	5ccb      	ldrb	r3, [r1, r3]
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	08002868 	.word	0x08002868

08001274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001278:	b0ae      	sub	sp, #184	; 0xb8
 800127a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800129a:	4bcb      	ldr	r3, [pc, #812]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	f200 8206 	bhi.w	80016b4 <HAL_RCC_GetSysClockFreq+0x440>
 80012a8:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ae:	bf00      	nop
 80012b0:	080012e5 	.word	0x080012e5
 80012b4:	080016b5 	.word	0x080016b5
 80012b8:	080016b5 	.word	0x080016b5
 80012bc:	080016b5 	.word	0x080016b5
 80012c0:	080012ed 	.word	0x080012ed
 80012c4:	080016b5 	.word	0x080016b5
 80012c8:	080016b5 	.word	0x080016b5
 80012cc:	080016b5 	.word	0x080016b5
 80012d0:	080012f5 	.word	0x080012f5
 80012d4:	080016b5 	.word	0x080016b5
 80012d8:	080016b5 	.word	0x080016b5
 80012dc:	080016b5 	.word	0x080016b5
 80012e0:	080014e5 	.word	0x080014e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012e4:	4bb9      	ldr	r3, [pc, #740]	; (80015cc <HAL_RCC_GetSysClockFreq+0x358>)
 80012e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80012ea:	e1e7      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012ec:	4bb8      	ldr	r3, [pc, #736]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80012ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80012f2:	e1e3      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012f4:	4bb4      	ldr	r3, [pc, #720]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001300:	4bb1      	ldr	r3, [pc, #708]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d071      	beq.n	80013f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800130c:	4bae      	ldr	r3, [pc, #696]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	099b      	lsrs	r3, r3, #6
 8001312:	2200      	movs	r2, #0
 8001314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001318:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800131c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800132e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001332:	4622      	mov	r2, r4
 8001334:	462b      	mov	r3, r5
 8001336:	f04f 0000 	mov.w	r0, #0
 800133a:	f04f 0100 	mov.w	r1, #0
 800133e:	0159      	lsls	r1, r3, #5
 8001340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001344:	0150      	lsls	r0, r2, #5
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4621      	mov	r1, r4
 800134c:	1a51      	subs	r1, r2, r1
 800134e:	6439      	str	r1, [r7, #64]	; 0x40
 8001350:	4629      	mov	r1, r5
 8001352:	eb63 0301 	sbc.w	r3, r3, r1
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001364:	4649      	mov	r1, r9
 8001366:	018b      	lsls	r3, r1, #6
 8001368:	4641      	mov	r1, r8
 800136a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800136e:	4641      	mov	r1, r8
 8001370:	018a      	lsls	r2, r1, #6
 8001372:	4641      	mov	r1, r8
 8001374:	1a51      	subs	r1, r2, r1
 8001376:	63b9      	str	r1, [r7, #56]	; 0x38
 8001378:	4649      	mov	r1, r9
 800137a:	eb63 0301 	sbc.w	r3, r3, r1
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800138c:	4649      	mov	r1, r9
 800138e:	00cb      	lsls	r3, r1, #3
 8001390:	4641      	mov	r1, r8
 8001392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001396:	4641      	mov	r1, r8
 8001398:	00ca      	lsls	r2, r1, #3
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	4603      	mov	r3, r0
 80013a0:	4622      	mov	r2, r4
 80013a2:	189b      	adds	r3, r3, r2
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
 80013a6:	462b      	mov	r3, r5
 80013a8:	460a      	mov	r2, r1
 80013aa:	eb42 0303 	adc.w	r3, r2, r3
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013bc:	4629      	mov	r1, r5
 80013be:	024b      	lsls	r3, r1, #9
 80013c0:	4621      	mov	r1, r4
 80013c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013c6:	4621      	mov	r1, r4
 80013c8:	024a      	lsls	r2, r1, #9
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013d2:	2200      	movs	r2, #0
 80013d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80013d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80013dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80013e0:	f7fe ff10 	bl	8000204 <__aeabi_uldivmod>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4613      	mov	r3, r2
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80013ee:	e067      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f0:	4b75      	ldr	r3, [pc, #468]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	099b      	lsrs	r3, r3, #6
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80013fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001400:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001408:	67bb      	str	r3, [r7, #120]	; 0x78
 800140a:	2300      	movs	r3, #0
 800140c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800140e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001412:	4622      	mov	r2, r4
 8001414:	462b      	mov	r3, r5
 8001416:	f04f 0000 	mov.w	r0, #0
 800141a:	f04f 0100 	mov.w	r1, #0
 800141e:	0159      	lsls	r1, r3, #5
 8001420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001424:	0150      	lsls	r0, r2, #5
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4621      	mov	r1, r4
 800142c:	1a51      	subs	r1, r2, r1
 800142e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001430:	4629      	mov	r1, r5
 8001432:	eb63 0301 	sbc.w	r3, r3, r1
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001444:	4649      	mov	r1, r9
 8001446:	018b      	lsls	r3, r1, #6
 8001448:	4641      	mov	r1, r8
 800144a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800144e:	4641      	mov	r1, r8
 8001450:	018a      	lsls	r2, r1, #6
 8001452:	4641      	mov	r1, r8
 8001454:	ebb2 0a01 	subs.w	sl, r2, r1
 8001458:	4649      	mov	r1, r9
 800145a:	eb63 0b01 	sbc.w	fp, r3, r1
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800146a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800146e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001472:	4692      	mov	sl, r2
 8001474:	469b      	mov	fp, r3
 8001476:	4623      	mov	r3, r4
 8001478:	eb1a 0303 	adds.w	r3, sl, r3
 800147c:	623b      	str	r3, [r7, #32]
 800147e:	462b      	mov	r3, r5
 8001480:	eb4b 0303 	adc.w	r3, fp, r3
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001492:	4629      	mov	r1, r5
 8001494:	028b      	lsls	r3, r1, #10
 8001496:	4621      	mov	r1, r4
 8001498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800149c:	4621      	mov	r1, r4
 800149e:	028a      	lsls	r2, r1, #10
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014a8:	2200      	movs	r2, #0
 80014aa:	673b      	str	r3, [r7, #112]	; 0x70
 80014ac:	677a      	str	r2, [r7, #116]	; 0x74
 80014ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014b2:	f7fe fea7 	bl	8000204 <__aeabi_uldivmod>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4613      	mov	r3, r2
 80014bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014c0:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	3301      	adds	r3, #1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80014d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014e2:	e0eb      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d06b      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fc:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	099b      	lsrs	r3, r3, #6
 8001502:	2200      	movs	r2, #0
 8001504:	66bb      	str	r3, [r7, #104]	; 0x68
 8001506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800150a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800150e:	663b      	str	r3, [r7, #96]	; 0x60
 8001510:	2300      	movs	r3, #0
 8001512:	667b      	str	r3, [r7, #100]	; 0x64
 8001514:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001518:	4622      	mov	r2, r4
 800151a:	462b      	mov	r3, r5
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	f04f 0100 	mov.w	r1, #0
 8001524:	0159      	lsls	r1, r3, #5
 8001526:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800152a:	0150      	lsls	r0, r2, #5
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4621      	mov	r1, r4
 8001532:	1a51      	subs	r1, r2, r1
 8001534:	61b9      	str	r1, [r7, #24]
 8001536:	4629      	mov	r1, r5
 8001538:	eb63 0301 	sbc.w	r3, r3, r1
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800154a:	4659      	mov	r1, fp
 800154c:	018b      	lsls	r3, r1, #6
 800154e:	4651      	mov	r1, sl
 8001550:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001554:	4651      	mov	r1, sl
 8001556:	018a      	lsls	r2, r1, #6
 8001558:	4651      	mov	r1, sl
 800155a:	ebb2 0801 	subs.w	r8, r2, r1
 800155e:	4659      	mov	r1, fp
 8001560:	eb63 0901 	sbc.w	r9, r3, r1
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001570:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001574:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001578:	4690      	mov	r8, r2
 800157a:	4699      	mov	r9, r3
 800157c:	4623      	mov	r3, r4
 800157e:	eb18 0303 	adds.w	r3, r8, r3
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	462b      	mov	r3, r5
 8001586:	eb49 0303 	adc.w	r3, r9, r3
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001598:	4629      	mov	r1, r5
 800159a:	024b      	lsls	r3, r1, #9
 800159c:	4621      	mov	r1, r4
 800159e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015a2:	4621      	mov	r1, r4
 80015a4:	024a      	lsls	r2, r1, #9
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ae:	2200      	movs	r2, #0
 80015b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80015b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80015b8:	f7fe fe24 	bl	8000204 <__aeabi_uldivmod>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4613      	mov	r3, r2
 80015c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015c6:	e065      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x420>
 80015c8:	40023800 	.word	0x40023800
 80015cc:	00f42400 	.word	0x00f42400
 80015d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d4:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_RCC_GetSysClockFreq+0x458>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	2200      	movs	r2, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	4611      	mov	r1, r2
 80015e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015e4:	653b      	str	r3, [r7, #80]	; 0x50
 80015e6:	2300      	movs	r3, #0
 80015e8:	657b      	str	r3, [r7, #84]	; 0x54
 80015ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80015ee:	4642      	mov	r2, r8
 80015f0:	464b      	mov	r3, r9
 80015f2:	f04f 0000 	mov.w	r0, #0
 80015f6:	f04f 0100 	mov.w	r1, #0
 80015fa:	0159      	lsls	r1, r3, #5
 80015fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001600:	0150      	lsls	r0, r2, #5
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4641      	mov	r1, r8
 8001608:	1a51      	subs	r1, r2, r1
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	4649      	mov	r1, r9
 800160e:	eb63 0301 	sbc.w	r3, r3, r1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001620:	4659      	mov	r1, fp
 8001622:	018b      	lsls	r3, r1, #6
 8001624:	4651      	mov	r1, sl
 8001626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800162a:	4651      	mov	r1, sl
 800162c:	018a      	lsls	r2, r1, #6
 800162e:	4651      	mov	r1, sl
 8001630:	1a54      	subs	r4, r2, r1
 8001632:	4659      	mov	r1, fp
 8001634:	eb63 0501 	sbc.w	r5, r3, r1
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	00eb      	lsls	r3, r5, #3
 8001642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001646:	00e2      	lsls	r2, r4, #3
 8001648:	4614      	mov	r4, r2
 800164a:	461d      	mov	r5, r3
 800164c:	4643      	mov	r3, r8
 800164e:	18e3      	adds	r3, r4, r3
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	464b      	mov	r3, r9
 8001654:	eb45 0303 	adc.w	r3, r5, r3
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001666:	4629      	mov	r1, r5
 8001668:	028b      	lsls	r3, r1, #10
 800166a:	4621      	mov	r1, r4
 800166c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001670:	4621      	mov	r1, r4
 8001672:	028a      	lsls	r2, r1, #10
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800167c:	2200      	movs	r2, #0
 800167e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001680:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001682:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001686:	f7fe fdbd 	bl	8000204 <__aeabi_uldivmod>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4613      	mov	r3, r2
 8001690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_RCC_GetSysClockFreq+0x458>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	0f1b      	lsrs	r3, r3, #28
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80016a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016b2:	e003      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80016b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	37b8      	adds	r7, #184	; 0xb8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	00f42400 	.word	0x00f42400

080016d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e28d      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8083 	beq.w	80017fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016f4:	4b94      	ldr	r3, [pc, #592]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d019      	beq.n	8001734 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001700:	4b91      	ldr	r3, [pc, #580]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001708:	2b08      	cmp	r3, #8
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800170c:	4b8e      	ldr	r3, [pc, #568]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001718:	d00c      	beq.n	8001734 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171a:	4b8b      	ldr	r3, [pc, #556]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001722:	2b0c      	cmp	r3, #12
 8001724:	d112      	bne.n	800174c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001726:	4b88      	ldr	r3, [pc, #544]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001732:	d10b      	bne.n	800174c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	4b84      	ldr	r3, [pc, #528]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d05b      	beq.n	80017f8 <HAL_RCC_OscConfig+0x124>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d157      	bne.n	80017f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e25a      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d106      	bne.n	8001764 <HAL_RCC_OscConfig+0x90>
 8001756:	4b7c      	ldr	r3, [pc, #496]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7b      	ldr	r2, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e01d      	b.n	80017a0 <HAL_RCC_OscConfig+0xcc>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0xb4>
 800176e:	4b76      	ldr	r3, [pc, #472]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a75      	ldr	r2, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b73      	ldr	r3, [pc, #460]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a72      	ldr	r2, [pc, #456]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0xcc>
 8001788:	4b6f      	ldr	r3, [pc, #444]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b6c      	ldr	r3, [pc, #432]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6b      	ldr	r2, [pc, #428]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800179a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f964 	bl	8000a74 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff f960 	bl	8000a74 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e21f      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b61      	ldr	r3, [pc, #388]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0xdc>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff f950 	bl	8000a74 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff f94c 	bl	8000a74 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e20b      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	4b57      	ldr	r3, [pc, #348]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x104>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d06f      	beq.n	80018e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001806:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b00      	cmp	r3, #0
 8001810:	d017      	beq.n	8001842 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001812:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800181a:	2b08      	cmp	r3, #8
 800181c:	d105      	bne.n	800182a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d11c      	bne.n	8001870 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001836:	4b44      	ldr	r3, [pc, #272]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x186>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1d3      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4937      	ldr	r1, [pc, #220]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	e03a      	b.n	80018e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_RCC_OscConfig+0x278>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff f8f9 	bl	8000a74 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff f8f5 	bl	8000a74 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1b4      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4925      	ldr	r1, [pc, #148]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
 80018b8:	e015      	b.n	80018e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_RCC_OscConfig+0x278>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f8d8 	bl	8000a74 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff f8d4 	bl	8000a74 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e193      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d036      	beq.n	8001960 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d016      	beq.n	8001928 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_RCC_OscConfig+0x27c>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff f8b8 	bl	8000a74 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff f8b4 	bl	8000a74 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e173      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 800191c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x234>
 8001926:	e01b      	b.n	8001960 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x27c>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff f8a1 	bl	8000a74 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	e00e      	b.n	8001954 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff f89d 	bl	8000a74 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d907      	bls.n	8001954 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e15c      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
 8001948:	40023800 	.word	0x40023800
 800194c:	42470000 	.word	0x42470000
 8001950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	4b8a      	ldr	r3, [pc, #552]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ea      	bne.n	8001936 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8097 	beq.w	8001a9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b83      	ldr	r3, [pc, #524]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10f      	bne.n	800199e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b7f      	ldr	r3, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a7e      	ldr	r2, [pc, #504]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b7c      	ldr	r3, [pc, #496]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199a:	2301      	movs	r3, #1
 800199c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <HAL_RCC_OscConfig+0x4b0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d118      	bne.n	80019dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x4b0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a75      	ldr	r2, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x4b0>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b6:	f7ff f85d 	bl	8000a74 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019be:	f7ff f859 	bl	8000a74 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e118      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x4b0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x31e>
 80019e4:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6713      	str	r3, [r2, #112]	; 0x70
 80019f0:	e01c      	b.n	8001a2c <HAL_RCC_OscConfig+0x358>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x340>
 80019fa:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a60      	ldr	r2, [pc, #384]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
 8001a06:	4b5e      	ldr	r3, [pc, #376]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	4a5d      	ldr	r2, [pc, #372]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6713      	str	r3, [r2, #112]	; 0x70
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0x358>
 8001a14:	4b5a      	ldr	r3, [pc, #360]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a59      	ldr	r2, [pc, #356]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a26:	f023 0304 	bic.w	r3, r3, #4
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d015      	beq.n	8001a60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff f81e 	bl	8000a74 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f81a 	bl	8000a74 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e0d7      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a52:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0ee      	beq.n	8001a3c <HAL_RCC_OscConfig+0x368>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff f808 	bl	8000a74 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7ff f804 	bl	8000a74 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0c1      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ee      	bne.n	8001a68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a90:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	4a3a      	ldr	r2, [pc, #232]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80ad 	beq.w	8001c00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d060      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d145      	bne.n	8001b46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <HAL_RCC_OscConfig+0x4b4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7fe ffd8 	bl	8000a74 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7fe ffd4 	bl	8000a74 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e093      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	019b      	lsls	r3, r3, #6
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	3b01      	subs	r3, #1
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	071b      	lsls	r3, r3, #28
 8001b12:	491b      	ldr	r1, [pc, #108]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCC_OscConfig+0x4b4>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7fe ffa9 	bl	8000a74 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b26:	f7fe ffa5 	bl	8000a74 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e064      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x452>
 8001b44:	e05c      	b.n	8001c00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_RCC_OscConfig+0x4b4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7fe ff92 	bl	8000a74 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7fe ff8e 	bl	8000a74 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e04d      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x480>
 8001b72:	e045      	b.n	8001c00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e040      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000
 8001b88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <HAL_RCC_OscConfig+0x538>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d030      	beq.n	8001bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d129      	bne.n	8001bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d122      	bne.n	8001bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d119      	bne.n	8001bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d10f      	bne.n	8001bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e041      	b.n	8001ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fdd0 	bl	80007dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 f9d8 	bl	8002004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d001      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e04e      	b.n	8001d66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d022      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf2:	d01d      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d018      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00e      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d111      	bne.n	8001d54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d010      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d52:	e007      	b.n	8001d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	40000c00 	.word	0x40000c00
 8001d84:	40010400 	.word	0x40010400
 8001d88:	40014000 	.word	0x40014000
 8001d8c:	40001800 	.word	0x40001800

08001d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d122      	bne.n	8001dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d11b      	bne.n	8001dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0202 	mvn.w	r2, #2
 8001dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8f8 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8ea 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f8fb 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d122      	bne.n	8001e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d11b      	bne.n	8001e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0204 	mvn.w	r2, #4
 8001e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2202      	movs	r2, #2
 8001e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8ce 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e005      	b.n	8001e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8c0 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8d1 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d122      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d11b      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0208 	mvn.w	r2, #8
 8001e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8a4 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f896 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8a7 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d122      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b10      	cmp	r3, #16
 8001eae:	d11b      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0210 	mvn.w	r2, #16
 8001eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f87a 	bl	8001fc8 <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f86c 	bl	8001fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f87d 	bl	8001fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10e      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0201 	mvn.w	r2, #1
 8001f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f846 	bl	8001fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b80      	cmp	r3, #128	; 0x80
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b80      	cmp	r3, #128	; 0x80
 8001f2e:	d107      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f988 	bl	8002250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	d107      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f842 	bl	8001ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0220 	mvn.w	r2, #32
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f952 	bl	800223c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	; (8002118 <TIM_Base_SetConfig+0x114>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002022:	d00f      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3d      	ldr	r2, [pc, #244]	; (800211c <TIM_Base_SetConfig+0x118>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00b      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <TIM_Base_SetConfig+0x120>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3a      	ldr	r2, [pc, #232]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d108      	bne.n	8002056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <TIM_Base_SetConfig+0x114>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d027      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2c      	ldr	r2, [pc, #176]	; (800211c <TIM_Base_SetConfig+0x118>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d023      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <TIM_Base_SetConfig+0x11c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <TIM_Base_SetConfig+0x120>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <TIM_Base_SetConfig+0x124>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d017      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a28      	ldr	r2, [pc, #160]	; (800212c <TIM_Base_SetConfig+0x128>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <TIM_Base_SetConfig+0x12c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00f      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <TIM_Base_SetConfig+0x130>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00b      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a25      	ldr	r2, [pc, #148]	; (8002138 <TIM_Base_SetConfig+0x134>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a24      	ldr	r2, [pc, #144]	; (800213c <TIM_Base_SetConfig+0x138>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <TIM_Base_SetConfig+0x13c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d108      	bne.n	80020c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <TIM_Base_SetConfig+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0xf8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <TIM_Base_SetConfig+0x124>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40010400 	.word	0x40010400
 800212c:	40014000 	.word	0x40014000
 8002130:	40014400 	.word	0x40014400
 8002134:	40014800 	.word	0x40014800
 8002138:	40001800 	.word	0x40001800
 800213c:	40001c00 	.word	0x40001c00
 8002140:	40002000 	.word	0x40002000

08002144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002158:	2302      	movs	r3, #2
 800215a:	e05a      	b.n	8002212 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a21      	ldr	r2, [pc, #132]	; (8002220 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d01d      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d018      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1a      	ldr	r2, [pc, #104]	; (800222c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00e      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a18      	ldr	r2, [pc, #96]	; (8002230 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a15      	ldr	r2, [pc, #84]	; (8002238 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10c      	bne.n	8002200 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	40000c00 	.word	0x40000c00
 8002230:	40010400 	.word	0x40010400
 8002234:	40014000 	.word	0x40014000
 8002238:	40001800 	.word	0x40001800

0800223c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e03f      	b.n	80022f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe face 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f829 	bl	8002300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b0c0      	sub	sp, #256	; 0x100
 8002306:	af00      	add	r7, sp, #0
 8002308:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800230c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	ea40 0301 	orr.w	r3, r0, r1
 8002328:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800232a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	431a      	orrs	r2, r3
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	431a      	orrs	r2, r3
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002358:	f021 010c 	bic.w	r1, r1, #12
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002366:	430b      	orrs	r3, r1
 8002368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237a:	6999      	ldr	r1, [r3, #24]
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	ea40 0301 	orr.w	r3, r0, r1
 8002386:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b8f      	ldr	r3, [pc, #572]	; (80025cc <UART_SetConfig+0x2cc>)
 8002390:	429a      	cmp	r2, r3
 8002392:	d005      	beq.n	80023a0 <UART_SetConfig+0xa0>
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b8d      	ldr	r3, [pc, #564]	; (80025d0 <UART_SetConfig+0x2d0>)
 800239c:	429a      	cmp	r2, r3
 800239e:	d104      	bne.n	80023aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023a0:	f7fe ff54 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 80023a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023a8:	e003      	b.n	80023b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023aa:	f7fe ff3b 	bl	8001224 <HAL_RCC_GetPCLK1Freq>
 80023ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023bc:	f040 810c 	bne.w	80025d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023d2:	4622      	mov	r2, r4
 80023d4:	462b      	mov	r3, r5
 80023d6:	1891      	adds	r1, r2, r2
 80023d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80023da:	415b      	adcs	r3, r3
 80023dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023e2:	4621      	mov	r1, r4
 80023e4:	eb12 0801 	adds.w	r8, r2, r1
 80023e8:	4629      	mov	r1, r5
 80023ea:	eb43 0901 	adc.w	r9, r3, r1
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002402:	4690      	mov	r8, r2
 8002404:	4699      	mov	r9, r3
 8002406:	4623      	mov	r3, r4
 8002408:	eb18 0303 	adds.w	r3, r8, r3
 800240c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002410:	462b      	mov	r3, r5
 8002412:	eb49 0303 	adc.w	r3, r9, r3
 8002416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002426:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800242a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800242e:	460b      	mov	r3, r1
 8002430:	18db      	adds	r3, r3, r3
 8002432:	653b      	str	r3, [r7, #80]	; 0x50
 8002434:	4613      	mov	r3, r2
 8002436:	eb42 0303 	adc.w	r3, r2, r3
 800243a:	657b      	str	r3, [r7, #84]	; 0x54
 800243c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002440:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002444:	f7fd fede 	bl	8000204 <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4b61      	ldr	r3, [pc, #388]	; (80025d4 <UART_SetConfig+0x2d4>)
 800244e:	fba3 2302 	umull	r2, r3, r3, r2
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	011c      	lsls	r4, r3, #4
 8002456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800245a:	2200      	movs	r2, #0
 800245c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002460:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002464:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002468:	4642      	mov	r2, r8
 800246a:	464b      	mov	r3, r9
 800246c:	1891      	adds	r1, r2, r2
 800246e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002470:	415b      	adcs	r3, r3
 8002472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002474:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002478:	4641      	mov	r1, r8
 800247a:	eb12 0a01 	adds.w	sl, r2, r1
 800247e:	4649      	mov	r1, r9
 8002480:	eb43 0b01 	adc.w	fp, r3, r1
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002490:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002498:	4692      	mov	sl, r2
 800249a:	469b      	mov	fp, r3
 800249c:	4643      	mov	r3, r8
 800249e:	eb1a 0303 	adds.w	r3, sl, r3
 80024a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024a6:	464b      	mov	r3, r9
 80024a8:	eb4b 0303 	adc.w	r3, fp, r3
 80024ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024c4:	460b      	mov	r3, r1
 80024c6:	18db      	adds	r3, r3, r3
 80024c8:	643b      	str	r3, [r7, #64]	; 0x40
 80024ca:	4613      	mov	r3, r2
 80024cc:	eb42 0303 	adc.w	r3, r2, r3
 80024d0:	647b      	str	r3, [r7, #68]	; 0x44
 80024d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024da:	f7fd fe93 	bl	8000204 <__aeabi_uldivmod>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <UART_SetConfig+0x2d4>)
 80024e6:	fba3 2301 	umull	r2, r3, r3, r1
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2264      	movs	r2, #100	; 0x64
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	1acb      	subs	r3, r1, r3
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024fa:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <UART_SetConfig+0x2d4>)
 80024fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002508:	441c      	add	r4, r3
 800250a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800250e:	2200      	movs	r2, #0
 8002510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002514:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002518:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800251c:	4642      	mov	r2, r8
 800251e:	464b      	mov	r3, r9
 8002520:	1891      	adds	r1, r2, r2
 8002522:	63b9      	str	r1, [r7, #56]	; 0x38
 8002524:	415b      	adcs	r3, r3
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002528:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800252c:	4641      	mov	r1, r8
 800252e:	1851      	adds	r1, r2, r1
 8002530:	6339      	str	r1, [r7, #48]	; 0x30
 8002532:	4649      	mov	r1, r9
 8002534:	414b      	adcs	r3, r1
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002544:	4659      	mov	r1, fp
 8002546:	00cb      	lsls	r3, r1, #3
 8002548:	4651      	mov	r1, sl
 800254a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800254e:	4651      	mov	r1, sl
 8002550:	00ca      	lsls	r2, r1, #3
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	4603      	mov	r3, r0
 8002558:	4642      	mov	r2, r8
 800255a:	189b      	adds	r3, r3, r2
 800255c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002560:	464b      	mov	r3, r9
 8002562:	460a      	mov	r2, r1
 8002564:	eb42 0303 	adc.w	r3, r2, r3
 8002568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002578:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800257c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002580:	460b      	mov	r3, r1
 8002582:	18db      	adds	r3, r3, r3
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
 8002586:	4613      	mov	r3, r2
 8002588:	eb42 0303 	adc.w	r3, r2, r3
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002592:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002596:	f7fd fe35 	bl	8000204 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <UART_SetConfig+0x2d4>)
 80025a0:	fba3 1302 	umull	r1, r3, r3, r2
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	2164      	movs	r1, #100	; 0x64
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	3332      	adds	r3, #50	; 0x32
 80025b2:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <UART_SetConfig+0x2d4>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f003 0207 	and.w	r2, r3, #7
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4422      	add	r2, r4
 80025c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025c8:	e106      	b.n	80027d8 <UART_SetConfig+0x4d8>
 80025ca:	bf00      	nop
 80025cc:	40011000 	.word	0x40011000
 80025d0:	40011400 	.word	0x40011400
 80025d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025dc:	2200      	movs	r2, #0
 80025de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025ea:	4642      	mov	r2, r8
 80025ec:	464b      	mov	r3, r9
 80025ee:	1891      	adds	r1, r2, r2
 80025f0:	6239      	str	r1, [r7, #32]
 80025f2:	415b      	adcs	r3, r3
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025fa:	4641      	mov	r1, r8
 80025fc:	1854      	adds	r4, r2, r1
 80025fe:	4649      	mov	r1, r9
 8002600:	eb43 0501 	adc.w	r5, r3, r1
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	00eb      	lsls	r3, r5, #3
 800260e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002612:	00e2      	lsls	r2, r4, #3
 8002614:	4614      	mov	r4, r2
 8002616:	461d      	mov	r5, r3
 8002618:	4643      	mov	r3, r8
 800261a:	18e3      	adds	r3, r4, r3
 800261c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002620:	464b      	mov	r3, r9
 8002622:	eb45 0303 	adc.w	r3, r5, r3
 8002626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800262a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002636:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002646:	4629      	mov	r1, r5
 8002648:	008b      	lsls	r3, r1, #2
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002650:	4621      	mov	r1, r4
 8002652:	008a      	lsls	r2, r1, #2
 8002654:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002658:	f7fd fdd4 	bl	8000204 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4b60      	ldr	r3, [pc, #384]	; (80027e4 <UART_SetConfig+0x4e4>)
 8002662:	fba3 2302 	umull	r2, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	011c      	lsls	r4, r3, #4
 800266a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002674:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002678:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	1891      	adds	r1, r2, r2
 8002682:	61b9      	str	r1, [r7, #24]
 8002684:	415b      	adcs	r3, r3
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268c:	4641      	mov	r1, r8
 800268e:	1851      	adds	r1, r2, r1
 8002690:	6139      	str	r1, [r7, #16]
 8002692:	4649      	mov	r1, r9
 8002694:	414b      	adcs	r3, r1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026a4:	4659      	mov	r1, fp
 80026a6:	00cb      	lsls	r3, r1, #3
 80026a8:	4651      	mov	r1, sl
 80026aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ae:	4651      	mov	r1, sl
 80026b0:	00ca      	lsls	r2, r1, #3
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	4603      	mov	r3, r0
 80026b8:	4642      	mov	r2, r8
 80026ba:	189b      	adds	r3, r3, r2
 80026bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026c0:	464b      	mov	r3, r9
 80026c2:	460a      	mov	r2, r1
 80026c4:	eb42 0303 	adc.w	r3, r2, r3
 80026c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80026d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026e4:	4649      	mov	r1, r9
 80026e6:	008b      	lsls	r3, r1, #2
 80026e8:	4641      	mov	r1, r8
 80026ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ee:	4641      	mov	r1, r8
 80026f0:	008a      	lsls	r2, r1, #2
 80026f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026f6:	f7fd fd85 	bl	8000204 <__aeabi_uldivmod>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <UART_SetConfig+0x4e4>)
 8002702:	fba3 2301 	umull	r2, r3, r3, r1
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2264      	movs	r2, #100	; 0x64
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	3332      	adds	r3, #50	; 0x32
 8002714:	4a33      	ldr	r2, [pc, #204]	; (80027e4 <UART_SetConfig+0x4e4>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002720:	441c      	add	r4, r3
 8002722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002726:	2200      	movs	r2, #0
 8002728:	673b      	str	r3, [r7, #112]	; 0x70
 800272a:	677a      	str	r2, [r7, #116]	; 0x74
 800272c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	1891      	adds	r1, r2, r2
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	415b      	adcs	r3, r3
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002740:	4641      	mov	r1, r8
 8002742:	1851      	adds	r1, r2, r1
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	4649      	mov	r1, r9
 8002748:	414b      	adcs	r3, r1
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002758:	4659      	mov	r1, fp
 800275a:	00cb      	lsls	r3, r1, #3
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002762:	4651      	mov	r1, sl
 8002764:	00ca      	lsls	r2, r1, #3
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	4603      	mov	r3, r0
 800276c:	4642      	mov	r2, r8
 800276e:	189b      	adds	r3, r3, r2
 8002770:	66bb      	str	r3, [r7, #104]	; 0x68
 8002772:	464b      	mov	r3, r9
 8002774:	460a      	mov	r2, r1
 8002776:	eb42 0303 	adc.w	r3, r2, r3
 800277a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	663b      	str	r3, [r7, #96]	; 0x60
 8002786:	667a      	str	r2, [r7, #100]	; 0x64
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002794:	4649      	mov	r1, r9
 8002796:	008b      	lsls	r3, r1, #2
 8002798:	4641      	mov	r1, r8
 800279a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800279e:	4641      	mov	r1, r8
 80027a0:	008a      	lsls	r2, r1, #2
 80027a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027a6:	f7fd fd2d 	bl	8000204 <__aeabi_uldivmod>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <UART_SetConfig+0x4e4>)
 80027b0:	fba3 1302 	umull	r1, r3, r3, r2
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	2164      	movs	r1, #100	; 0x64
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	3332      	adds	r3, #50	; 0x32
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <UART_SetConfig+0x4e4>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	f003 020f 	and.w	r2, r3, #15
 80027ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4422      	add	r2, r4
 80027d6:	609a      	str	r2, [r3, #8]
}
 80027d8:	bf00      	nop
 80027da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027de:	46bd      	mov	sp, r7
 80027e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027e4:	51eb851f 	.word	0x51eb851f

080027e8 <memset>:
 80027e8:	4402      	add	r2, r0
 80027ea:	4603      	mov	r3, r0
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d100      	bne.n	80027f2 <memset+0xa>
 80027f0:	4770      	bx	lr
 80027f2:	f803 1b01 	strb.w	r1, [r3], #1
 80027f6:	e7f9      	b.n	80027ec <memset+0x4>

080027f8 <__libc_init_array>:
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	4d0d      	ldr	r5, [pc, #52]	; (8002830 <__libc_init_array+0x38>)
 80027fc:	4c0d      	ldr	r4, [pc, #52]	; (8002834 <__libc_init_array+0x3c>)
 80027fe:	1b64      	subs	r4, r4, r5
 8002800:	10a4      	asrs	r4, r4, #2
 8002802:	2600      	movs	r6, #0
 8002804:	42a6      	cmp	r6, r4
 8002806:	d109      	bne.n	800281c <__libc_init_array+0x24>
 8002808:	4d0b      	ldr	r5, [pc, #44]	; (8002838 <__libc_init_array+0x40>)
 800280a:	4c0c      	ldr	r4, [pc, #48]	; (800283c <__libc_init_array+0x44>)
 800280c:	f000 f818 	bl	8002840 <_init>
 8002810:	1b64      	subs	r4, r4, r5
 8002812:	10a4      	asrs	r4, r4, #2
 8002814:	2600      	movs	r6, #0
 8002816:	42a6      	cmp	r6, r4
 8002818:	d105      	bne.n	8002826 <__libc_init_array+0x2e>
 800281a:	bd70      	pop	{r4, r5, r6, pc}
 800281c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002820:	4798      	blx	r3
 8002822:	3601      	adds	r6, #1
 8002824:	e7ee      	b.n	8002804 <__libc_init_array+0xc>
 8002826:	f855 3b04 	ldr.w	r3, [r5], #4
 800282a:	4798      	blx	r3
 800282c:	3601      	adds	r6, #1
 800282e:	e7f2      	b.n	8002816 <__libc_init_array+0x1e>
 8002830:	08002878 	.word	0x08002878
 8002834:	08002878 	.word	0x08002878
 8002838:	08002878 	.word	0x08002878
 800283c:	0800287c 	.word	0x0800287c

08002840 <_init>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	bf00      	nop
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr

0800284c <_fini>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	bf00      	nop
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr
