
BMP280_I2C_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004130  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004374  08004374  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800437c  0800437c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  080043e0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080043e0  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b924  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aa1  00000000  00000000  0002b9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007be  00000000  00000000  0002de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002178e  00000000  00000000  0002e636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dddd  00000000  00000000  0004fdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae42  00000000  00000000  0005dba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e20  00000000  00000000  001289e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0012b804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042e8 	.word	0x080042e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080042e8 	.word	0x080042e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_ldivmod>:
 80002c0:	b97b      	cbnz	r3, 80002e2 <__aeabi_ldivmod+0x22>
 80002c2:	b972      	cbnz	r2, 80002e2 <__aeabi_ldivmod+0x22>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bfbe      	ittt	lt
 80002c8:	2000      	movlt	r0, #0
 80002ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ce:	e006      	blt.n	80002de <__aeabi_ldivmod+0x1e>
 80002d0:	bf08      	it	eq
 80002d2:	2800      	cmpeq	r0, #0
 80002d4:	bf1c      	itt	ne
 80002d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002da:	f04f 30ff 	movne.w	r0, #4294967295
 80002de:	f000 b9bb 	b.w	8000658 <__aeabi_idiv0>
 80002e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ea:	2900      	cmp	r1, #0
 80002ec:	db09      	blt.n	8000302 <__aeabi_ldivmod+0x42>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db1a      	blt.n	8000328 <__aeabi_ldivmod+0x68>
 80002f2:	f000 f84d 	bl	8000390 <__udivmoddi4>
 80002f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	4240      	negs	r0, r0
 8000304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	db1b      	blt.n	8000344 <__aeabi_ldivmod+0x84>
 800030c:	f000 f840 	bl	8000390 <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	4252      	negs	r2, r2
 8000322:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000326:	4770      	bx	lr
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	f000 f82f 	bl	8000390 <__udivmoddi4>
 8000332:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033a:	b004      	add	sp, #16
 800033c:	4240      	negs	r0, r0
 800033e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000342:	4770      	bx	lr
 8000344:	4252      	negs	r2, r2
 8000346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034a:	f000 f821 	bl	8000390 <__udivmoddi4>
 800034e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000356:	b004      	add	sp, #16
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b970 	b.w	8000658 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	460d      	mov	r5, r1
 8000398:	4604      	mov	r4, r0
 800039a:	460f      	mov	r7, r1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d14a      	bne.n	8000436 <__udivmoddi4+0xa6>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4694      	mov	ip, r2
 80003a4:	d965      	bls.n	8000472 <__udivmoddi4+0xe2>
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	b143      	cbz	r3, 80003be <__udivmoddi4+0x2e>
 80003ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b0:	f1c3 0220 	rsb	r2, r3, #32
 80003b4:	409f      	lsls	r7, r3
 80003b6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ba:	4317      	orrs	r7, r2
 80003bc:	409c      	lsls	r4, r3
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fa1f f58c 	uxth.w	r5, ip
 80003c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ca:	0c22      	lsrs	r2, r4, #16
 80003cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003d4:	fb01 f005 	mul.w	r0, r1, r5
 80003d8:	4290      	cmp	r0, r2
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x62>
 80003dc:	eb1c 0202 	adds.w	r2, ip, r2
 80003e0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003e4:	f080 811c 	bcs.w	8000620 <__udivmoddi4+0x290>
 80003e8:	4290      	cmp	r0, r2
 80003ea:	f240 8119 	bls.w	8000620 <__udivmoddi4+0x290>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4462      	add	r2, ip
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	b2a4      	uxth	r4, r4
 80003f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000402:	fb00 f505 	mul.w	r5, r0, r5
 8000406:	42a5      	cmp	r5, r4
 8000408:	d90a      	bls.n	8000420 <__udivmoddi4+0x90>
 800040a:	eb1c 0404 	adds.w	r4, ip, r4
 800040e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000412:	f080 8107 	bcs.w	8000624 <__udivmoddi4+0x294>
 8000416:	42a5      	cmp	r5, r4
 8000418:	f240 8104 	bls.w	8000624 <__udivmoddi4+0x294>
 800041c:	4464      	add	r4, ip
 800041e:	3802      	subs	r0, #2
 8000420:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	2100      	movs	r1, #0
 8000428:	b11e      	cbz	r6, 8000432 <__udivmoddi4+0xa2>
 800042a:	40dc      	lsrs	r4, r3
 800042c:	2300      	movs	r3, #0
 800042e:	e9c6 4300 	strd	r4, r3, [r6]
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0xbc>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80ed 	beq.w	800061a <__udivmoddi4+0x28a>
 8000440:	2100      	movs	r1, #0
 8000442:	e9c6 0500 	strd	r0, r5, [r6]
 8000446:	4608      	mov	r0, r1
 8000448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044c:	fab3 f183 	clz	r1, r3
 8000450:	2900      	cmp	r1, #0
 8000452:	d149      	bne.n	80004e8 <__udivmoddi4+0x158>
 8000454:	42ab      	cmp	r3, r5
 8000456:	d302      	bcc.n	800045e <__udivmoddi4+0xce>
 8000458:	4282      	cmp	r2, r0
 800045a:	f200 80f8 	bhi.w	800064e <__udivmoddi4+0x2be>
 800045e:	1a84      	subs	r4, r0, r2
 8000460:	eb65 0203 	sbc.w	r2, r5, r3
 8000464:	2001      	movs	r0, #1
 8000466:	4617      	mov	r7, r2
 8000468:	2e00      	cmp	r6, #0
 800046a:	d0e2      	beq.n	8000432 <__udivmoddi4+0xa2>
 800046c:	e9c6 4700 	strd	r4, r7, [r6]
 8000470:	e7df      	b.n	8000432 <__udivmoddi4+0xa2>
 8000472:	b902      	cbnz	r2, 8000476 <__udivmoddi4+0xe6>
 8000474:	deff      	udf	#255	; 0xff
 8000476:	fab2 f382 	clz	r3, r2
 800047a:	2b00      	cmp	r3, #0
 800047c:	f040 8090 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000480:	1a8a      	subs	r2, r1, r2
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2101      	movs	r1, #1
 800048c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000490:	fb07 2015 	mls	r0, r7, r5, r2
 8000494:	0c22      	lsrs	r2, r4, #16
 8000496:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800049a:	fb0e f005 	mul.w	r0, lr, r5
 800049e:	4290      	cmp	r0, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a2:	eb1c 0202 	adds.w	r2, ip, r2
 80004a6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4290      	cmp	r0, r2
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2b8>
 80004b2:	4645      	mov	r5, r8
 80004b4:	1a12      	subs	r2, r2, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004bc:	fb07 2210 	mls	r2, r7, r0, r2
 80004c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x14e>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x14c>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2c2>
 80004dc:	4610      	mov	r0, r2
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004e6:	e79f      	b.n	8000428 <__udivmoddi4+0x98>
 80004e8:	f1c1 0720 	rsb	r7, r1, #32
 80004ec:	408b      	lsls	r3, r1
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa05 f401 	lsl.w	r4, r5, r1
 80004fa:	fa20 f307 	lsr.w	r3, r0, r7
 80004fe:	40fd      	lsrs	r5, r7
 8000500:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000504:	4323      	orrs	r3, r4
 8000506:	fbb5 f8f9 	udiv	r8, r5, r9
 800050a:	fa1f fe8c 	uxth.w	lr, ip
 800050e:	fb09 5518 	mls	r5, r9, r8, r5
 8000512:	0c1c      	lsrs	r4, r3, #16
 8000514:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000518:	fb08 f50e 	mul.w	r5, r8, lr
 800051c:	42a5      	cmp	r5, r4
 800051e:	fa02 f201 	lsl.w	r2, r2, r1
 8000522:	fa00 f001 	lsl.w	r0, r0, r1
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2b4>
 8000534:	42a5      	cmp	r5, r4
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2b4>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4464      	add	r4, ip
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	b29d      	uxth	r5, r3
 8000544:	fbb4 f3f9 	udiv	r3, r4, r9
 8000548:	fb09 4413 	mls	r4, r9, r3, r4
 800054c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000550:	fb03 fe0e 	mul.w	lr, r3, lr
 8000554:	45a6      	cmp	lr, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2ac>
 8000562:	45a6      	cmp	lr, r4
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2ac>
 8000566:	3b02      	subs	r3, #2
 8000568:	4464      	add	r4, ip
 800056a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800056e:	fba3 9502 	umull	r9, r5, r3, r2
 8000572:	eba4 040e 	sub.w	r4, r4, lr
 8000576:	42ac      	cmp	r4, r5
 8000578:	46c8      	mov	r8, r9
 800057a:	46ae      	mov	lr, r5
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x29c>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x298>
 8000580:	b156      	cbz	r6, 8000598 <__udivmoddi4+0x208>
 8000582:	ebb0 0208 	subs.w	r2, r0, r8
 8000586:	eb64 040e 	sbc.w	r4, r4, lr
 800058a:	fa04 f707 	lsl.w	r7, r4, r7
 800058e:	40ca      	lsrs	r2, r1
 8000590:	40cc      	lsrs	r4, r1
 8000592:	4317      	orrs	r7, r2
 8000594:	e9c6 7400 	strd	r7, r4, [r6]
 8000598:	4618      	mov	r0, r3
 800059a:	2100      	movs	r1, #0
 800059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a0:	f1c3 0120 	rsb	r1, r3, #32
 80005a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005a8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ac:	fa25 f101 	lsr.w	r1, r5, r1
 80005b0:	409d      	lsls	r5, r3
 80005b2:	432a      	orrs	r2, r5
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005c0:	fb07 1510 	mls	r5, r7, r0, r1
 80005c4:	0c11      	lsrs	r1, r2, #16
 80005c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ca:	fb00 f50e 	mul.w	r5, r0, lr
 80005ce:	428d      	cmp	r5, r1
 80005d0:	fa04 f403 	lsl.w	r4, r4, r3
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x258>
 80005d6:	eb1c 0101 	adds.w	r1, ip, r1
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b0>
 80005e0:	428d      	cmp	r5, r1
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b0>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4461      	add	r1, ip
 80005e8:	1b49      	subs	r1, r1, r5
 80005ea:	b292      	uxth	r2, r2
 80005ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80005f0:	fb07 1115 	mls	r1, r7, r5, r1
 80005f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005f8:	fb05 f10e 	mul.w	r1, r5, lr
 80005fc:	4291      	cmp	r1, r2
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x282>
 8000600:	eb1c 0202 	adds.w	r2, ip, r2
 8000604:	f105 38ff 	add.w	r8, r5, #4294967295
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 800060a:	4291      	cmp	r1, r2
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2a8>
 800060e:	3d02      	subs	r5, #2
 8000610:	4462      	add	r2, ip
 8000612:	1a52      	subs	r2, r2, r1
 8000614:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0xfc>
 800061a:	4631      	mov	r1, r6
 800061c:	4630      	mov	r0, r6
 800061e:	e708      	b.n	8000432 <__udivmoddi4+0xa2>
 8000620:	4639      	mov	r1, r7
 8000622:	e6e6      	b.n	80003f2 <__udivmoddi4+0x62>
 8000624:	4610      	mov	r0, r2
 8000626:	e6fb      	b.n	8000420 <__udivmoddi4+0x90>
 8000628:	4548      	cmp	r0, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000634:	3b01      	subs	r3, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000638:	4645      	mov	r5, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x282>
 800063c:	462b      	mov	r3, r5
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1da>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x258>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000648:	3d02      	subs	r5, #2
 800064a:	4462      	add	r2, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x124>
 800064e:	4608      	mov	r0, r1
 8000650:	e70a      	b.n	8000468 <__udivmoddi4+0xd8>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x14e>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2203      	movs	r2, #3
 8000668:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2203      	movs	r2, #3
 8000674:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2203      	movs	r2, #3
 800067a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2203      	movs	r2, #3
 8000680:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2203      	movs	r2, #3
 8000686:	715a      	strb	r2, [r3, #5]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <read_data>:
		return false;

}

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af04      	add	r7, sp, #16
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	461a      	mov	r2, r3
 80006a0:	460b      	mov	r3, r1
 80006a2:	72fb      	strb	r3, [r7, #11]
 80006a4:	4613      	mov	r3, r2
 80006a6:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80006b4:	7afb      	ldrb	r3, [r7, #11]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	7abb      	ldrb	r3, [r7, #10]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	8af9      	ldrh	r1, [r7, #22]
 80006be:	f241 3488 	movw	r4, #5000	; 0x1388
 80006c2:	9402      	str	r4, [sp, #8]
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	f001 fb14 	bl	8001cf8 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <read_data+0x46>
		return 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <read_data+0x48>
	else
		return 1;
 80006da:	2301      	movs	r3, #1

}
 80006dc:	4618      	mov	r0, r3
 80006de:	371c      	adds	r7, #28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd90      	pop	{r4, r7, pc}

080006e4 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80006e4:	b480      	push	{r7}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	10da      	asrs	r2, r3, #3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000702:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000706:	12db      	asrs	r3, r3, #11
 8000708:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	111b      	asrs	r3, r3, #4
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	8812      	ldrh	r2, [r2, #0]
 8000712:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000714:	68ba      	ldr	r2, [r7, #8]
 8000716:	1112      	asrs	r2, r2, #4
 8000718:	68f9      	ldr	r1, [r7, #12]
 800071a:	8809      	ldrh	r1, [r1, #0]
 800071c:	1a52      	subs	r2, r2, r1
 800071e:	fb02 f303 	mul.w	r3, r2, r3
 8000722:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800072a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800072e:	139b      	asrs	r3, r3, #14
 8000730:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	441a      	add	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	3380      	adds	r3, #128	; 0x80
 8000748:	121b      	asrs	r3, r3, #8
}
 800074a:	4618      	mov	r0, r3
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000756:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800075a:	b0cc      	sub	sp, #304	; 0x130
 800075c:	af00      	add	r7, sp, #0
 800075e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000762:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8000766:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800076a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800076e:	17da      	asrs	r2, r3, #31
 8000770:	461c      	mov	r4, r3
 8000772:	4615      	mov	r5, r2
 8000774:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000778:	f145 3bff 	adc.w	fp, r5, #4294967295
 800077c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000780:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000788:	fb03 f102 	mul.w	r1, r3, r2
 800078c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000790:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000794:	fb02 f303 	mul.w	r3, r2, r3
 8000798:	18ca      	adds	r2, r1, r3
 800079a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800079e:	fba3 8903 	umull	r8, r9, r3, r3
 80007a2:	eb02 0309 	add.w	r3, r2, r9
 80007a6:	4699      	mov	r9, r3
 80007a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	17da      	asrs	r2, r3, #31
 80007b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80007b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80007bc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80007c0:	4603      	mov	r3, r0
 80007c2:	fb03 f209 	mul.w	r2, r3, r9
 80007c6:	460b      	mov	r3, r1
 80007c8:	fb08 f303 	mul.w	r3, r8, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	4602      	mov	r2, r0
 80007d0:	fba8 1202 	umull	r1, r2, r8, r2
 80007d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80007d8:	460a      	mov	r2, r1
 80007da:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80007de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80007e2:	4413      	add	r3, r2
 80007e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80007e8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80007ec:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80007f0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80007f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	17da      	asrs	r2, r3, #31
 8000800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000804:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800080c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000810:	462a      	mov	r2, r5
 8000812:	fb02 f203 	mul.w	r2, r2, r3
 8000816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800081a:	4621      	mov	r1, r4
 800081c:	fb01 f303 	mul.w	r3, r1, r3
 8000820:	441a      	add	r2, r3
 8000822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000826:	4621      	mov	r1, r4
 8000828:	fba3 1301 	umull	r1, r3, r3, r1
 800082c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000830:	460b      	mov	r3, r1
 8000832:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800083a:	18d3      	adds	r3, r2, r3
 800083c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	f04f 0100 	mov.w	r1, #0
 8000848:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800084c:	462b      	mov	r3, r5
 800084e:	0459      	lsls	r1, r3, #17
 8000850:	4623      	mov	r3, r4
 8000852:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000856:	4623      	mov	r3, r4
 8000858:	0458      	lsls	r0, r3, #17
 800085a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800085e:	1814      	adds	r4, r2, r0
 8000860:	643c      	str	r4, [r7, #64]	; 0x40
 8000862:	414b      	adcs	r3, r1
 8000864:	647b      	str	r3, [r7, #68]	; 0x44
 8000866:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800086a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800086e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000872:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000876:	b21b      	sxth	r3, r3
 8000878:	17da      	asrs	r2, r3, #31
 800087a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800087e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000882:	f04f 0000 	mov.w	r0, #0
 8000886:	f04f 0100 	mov.w	r1, #0
 800088a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800088e:	00d9      	lsls	r1, r3, #3
 8000890:	2000      	movs	r0, #0
 8000892:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000896:	1814      	adds	r4, r2, r0
 8000898:	63bc      	str	r4, [r7, #56]	; 0x38
 800089a:	414b      	adcs	r3, r1
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800089e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80008a2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80008a6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80008aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80008ae:	fb03 f102 	mul.w	r1, r3, r2
 80008b2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80008b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
 80008be:	18ca      	adds	r2, r1, r3
 80008c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80008c4:	fba3 1303 	umull	r1, r3, r3, r3
 80008c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80008cc:	460b      	mov	r3, r1
 80008ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80008d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80008d6:	18d3      	adds	r3, r2, r3
 80008d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80008dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	17da      	asrs	r2, r3, #31
 80008e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80008ec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80008f0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80008f4:	462b      	mov	r3, r5
 80008f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80008fa:	4642      	mov	r2, r8
 80008fc:	fb02 f203 	mul.w	r2, r2, r3
 8000900:	464b      	mov	r3, r9
 8000902:	4621      	mov	r1, r4
 8000904:	fb01 f303 	mul.w	r3, r1, r3
 8000908:	4413      	add	r3, r2
 800090a:	4622      	mov	r2, r4
 800090c:	4641      	mov	r1, r8
 800090e:	fba2 1201 	umull	r1, r2, r2, r1
 8000912:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000916:	460a      	mov	r2, r1
 8000918:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800091c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000920:	4413      	add	r3, r2
 8000922:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 0100 	mov.w	r1, #0
 800092e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000932:	4623      	mov	r3, r4
 8000934:	0a18      	lsrs	r0, r3, #8
 8000936:	462b      	mov	r3, r5
 8000938:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800093c:	462b      	mov	r3, r5
 800093e:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000944:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000948:	b21b      	sxth	r3, r3
 800094a:	17da      	asrs	r2, r3, #31
 800094c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000950:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000954:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000958:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800095c:	464a      	mov	r2, r9
 800095e:	fb02 f203 	mul.w	r2, r2, r3
 8000962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000966:	4644      	mov	r4, r8
 8000968:	fb04 f303 	mul.w	r3, r4, r3
 800096c:	441a      	add	r2, r3
 800096e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000972:	4644      	mov	r4, r8
 8000974:	fba3 4304 	umull	r4, r3, r3, r4
 8000978:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800097c:	4623      	mov	r3, r4
 800097e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000982:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000986:	18d3      	adds	r3, r2, r3
 8000988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800098c:	f04f 0200 	mov.w	r2, #0
 8000990:	f04f 0300 	mov.w	r3, #0
 8000994:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8000998:	464c      	mov	r4, r9
 800099a:	0323      	lsls	r3, r4, #12
 800099c:	4644      	mov	r4, r8
 800099e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80009a2:	4644      	mov	r4, r8
 80009a4:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80009a6:	1884      	adds	r4, r0, r2
 80009a8:	633c      	str	r4, [r7, #48]	; 0x30
 80009aa:	eb41 0303 	adc.w	r3, r1, r3
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
 80009b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80009b4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80009b8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80009bc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80009c0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80009c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80009c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80009cc:	88db      	ldrh	r3, [r3, #6]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	2200      	movs	r2, #0
 80009d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80009d6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80009da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80009de:	462b      	mov	r3, r5
 80009e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80009e4:	4642      	mov	r2, r8
 80009e6:	fb02 f203 	mul.w	r2, r2, r3
 80009ea:	464b      	mov	r3, r9
 80009ec:	4621      	mov	r1, r4
 80009ee:	fb01 f303 	mul.w	r3, r1, r3
 80009f2:	4413      	add	r3, r2
 80009f4:	4622      	mov	r2, r4
 80009f6:	4641      	mov	r1, r8
 80009f8:	fba2 1201 	umull	r1, r2, r2, r1
 80009fc:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000a00:	460a      	mov	r2, r1
 8000a02:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000a06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000a0a:	4413      	add	r3, r2
 8000a0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000a1c:	4629      	mov	r1, r5
 8000a1e:	104a      	asrs	r2, r1, #1
 8000a20:	4629      	mov	r1, r5
 8000a22:	17cb      	asrs	r3, r1, #31
 8000a24:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8000a28:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	d101      	bne.n	8000a34 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8000a30:	2300      	movs	r3, #0
 8000a32:	e148      	b.n	8000cc6 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8000a34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a38:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000a3c:	17da      	asrs	r2, r3, #31
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a42:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000a46:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8000a4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a4e:	105b      	asrs	r3, r3, #1
 8000a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000a54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a58:	07db      	lsls	r3, r3, #31
 8000a5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000a5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000a62:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000a66:	4621      	mov	r1, r4
 8000a68:	1a89      	subs	r1, r1, r2
 8000a6a:	67b9      	str	r1, [r7, #120]	; 0x78
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000a72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a74:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000a78:	4622      	mov	r2, r4
 8000a7a:	462b      	mov	r3, r5
 8000a7c:	1891      	adds	r1, r2, r2
 8000a7e:	6239      	str	r1, [r7, #32]
 8000a80:	415b      	adcs	r3, r3
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a88:	4621      	mov	r1, r4
 8000a8a:	1851      	adds	r1, r2, r1
 8000a8c:	61b9      	str	r1, [r7, #24]
 8000a8e:	4629      	mov	r1, r5
 8000a90:	414b      	adcs	r3, r1
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	f04f 0200 	mov.w	r2, #0
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000aa0:	4649      	mov	r1, r9
 8000aa2:	018b      	lsls	r3, r1, #6
 8000aa4:	4641      	mov	r1, r8
 8000aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000aaa:	4641      	mov	r1, r8
 8000aac:	018a      	lsls	r2, r1, #6
 8000aae:	4641      	mov	r1, r8
 8000ab0:	1889      	adds	r1, r1, r2
 8000ab2:	6139      	str	r1, [r7, #16]
 8000ab4:	4649      	mov	r1, r9
 8000ab6:	eb43 0101 	adc.w	r1, r3, r1
 8000aba:	6179      	str	r1, [r7, #20]
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000ac8:	4649      	mov	r1, r9
 8000aca:	008b      	lsls	r3, r1, #2
 8000acc:	4641      	mov	r1, r8
 8000ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000ad2:	4641      	mov	r1, r8
 8000ad4:	008a      	lsls	r2, r1, #2
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4603      	mov	r3, r0
 8000adc:	4622      	mov	r2, r4
 8000ade:	189b      	adds	r3, r3, r2
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	462a      	mov	r2, r5
 8000ae6:	eb42 0303 	adc.w	r3, r2, r3
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000af8:	4649      	mov	r1, r9
 8000afa:	008b      	lsls	r3, r1, #2
 8000afc:	4641      	mov	r1, r8
 8000afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000b02:	4641      	mov	r1, r8
 8000b04:	008a      	lsls	r2, r1, #2
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4622      	mov	r2, r4
 8000b0e:	189b      	adds	r3, r3, r2
 8000b10:	673b      	str	r3, [r7, #112]	; 0x70
 8000b12:	462b      	mov	r3, r5
 8000b14:	460a      	mov	r2, r1
 8000b16:	eb42 0303 	adc.w	r3, r2, r3
 8000b1a:	677b      	str	r3, [r7, #116]	; 0x74
 8000b1c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8000b20:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000b24:	f7ff fbcc 	bl	80002c0 <__aeabi_ldivmod>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b34:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	17da      	asrs	r2, r3, #31
 8000b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000b3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000b40:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	f04f 0100 	mov.w	r1, #0
 8000b4c:	0b50      	lsrs	r0, r2, #13
 8000b4e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000b52:	1359      	asrs	r1, r3, #13
 8000b54:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000b58:	462b      	mov	r3, r5
 8000b5a:	fb00 f203 	mul.w	r2, r0, r3
 8000b5e:	4623      	mov	r3, r4
 8000b60:	fb03 f301 	mul.w	r3, r3, r1
 8000b64:	4413      	add	r3, r2
 8000b66:	4622      	mov	r2, r4
 8000b68:	fba2 1200 	umull	r1, r2, r2, r0
 8000b6c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000b70:	460a      	mov	r2, r1
 8000b72:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8000b76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000b7a:	4413      	add	r3, r2
 8000b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000b80:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	f04f 0100 	mov.w	r1, #0
 8000b8c:	0b50      	lsrs	r0, r2, #13
 8000b8e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000b92:	1359      	asrs	r1, r3, #13
 8000b94:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000b98:	462b      	mov	r3, r5
 8000b9a:	fb00 f203 	mul.w	r2, r0, r3
 8000b9e:	4623      	mov	r3, r4
 8000ba0:	fb03 f301 	mul.w	r3, r3, r1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4622      	mov	r2, r4
 8000ba8:	fba2 1200 	umull	r1, r2, r2, r0
 8000bac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000bb6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000bba:	4413      	add	r3, r2
 8000bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8000bcc:	4621      	mov	r1, r4
 8000bce:	0e4a      	lsrs	r2, r1, #25
 8000bd0:	4629      	mov	r1, r5
 8000bd2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	164b      	asrs	r3, r1, #25
 8000bda:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000be2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	17da      	asrs	r2, r3, #31
 8000bea:	663b      	str	r3, [r7, #96]	; 0x60
 8000bec:	667a      	str	r2, [r7, #100]	; 0x64
 8000bee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000bf2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000bf6:	462a      	mov	r2, r5
 8000bf8:	fb02 f203 	mul.w	r2, r2, r3
 8000bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c00:	4621      	mov	r1, r4
 8000c02:	fb01 f303 	mul.w	r3, r1, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	fba2 1201 	umull	r1, r2, r2, r1
 8000c12:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8000c16:	460a      	mov	r2, r1
 8000c18:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8000c1c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000c20:	4413      	add	r3, r2
 8000c22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8000c32:	4621      	mov	r1, r4
 8000c34:	0cca      	lsrs	r2, r1, #19
 8000c36:	4629      	mov	r1, r5
 8000c38:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000c3c:	4629      	mov	r1, r5
 8000c3e:	14cb      	asrs	r3, r1, #19
 8000c40:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8000c44:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8000c48:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8000c4c:	1884      	adds	r4, r0, r2
 8000c4e:	65bc      	str	r4, [r7, #88]	; 0x58
 8000c50:	eb41 0303 	adc.w	r3, r1, r3
 8000c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c56:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c5a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000c5e:	4621      	mov	r1, r4
 8000c60:	1889      	adds	r1, r1, r2
 8000c62:	6539      	str	r1, [r7, #80]	; 0x50
 8000c64:	4629      	mov	r1, r5
 8000c66:	eb43 0101 	adc.w	r1, r3, r1
 8000c6a:	6579      	str	r1, [r7, #84]	; 0x54
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	f04f 0100 	mov.w	r1, #0
 8000c74:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000c78:	4623      	mov	r3, r4
 8000c7a:	0a18      	lsrs	r0, r3, #8
 8000c7c:	462b      	mov	r3, r5
 8000c7e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c82:	462b      	mov	r3, r5
 8000c84:	1219      	asrs	r1, r3, #8
 8000c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c8a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	17da      	asrs	r2, r3, #31
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8000ca2:	464c      	mov	r4, r9
 8000ca4:	0123      	lsls	r3, r4, #4
 8000ca6:	4644      	mov	r4, r8
 8000ca8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000cac:	4644      	mov	r4, r8
 8000cae:	0122      	lsls	r2, r4, #4
 8000cb0:	1884      	adds	r4, r0, r2
 8000cb2:	603c      	str	r4, [r7, #0]
 8000cb4:	eb41 0303 	adc.w	r3, r1, r3
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000cbe:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8000cc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000cd2 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8000cd2:	b480      	push	{r7}
 8000cd4:	b087      	sub	sp, #28
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8000ce4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	039a      	lsls	r2, r3, #14
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000cf0:	051b      	lsls	r3, r3, #20
 8000cf2:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fb01 f303 	mul.w	r3, r1, r3
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000d08:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8000d10:	4611      	mov	r1, r2
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	fb01 f202 	mul.w	r2, r1, r2
 8000d18:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	7f09      	ldrb	r1, [r1, #28]
 8000d1e:	4608      	mov	r0, r1
 8000d20:	6979      	ldr	r1, [r7, #20]
 8000d22:	fb00 f101 	mul.w	r1, r0, r1
 8000d26:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000d28:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000d2c:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000d30:	1292      	asrs	r2, r2, #10
 8000d32:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8000d36:	68f9      	ldr	r1, [r7, #12]
 8000d38:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8000d3c:	fb01 f202 	mul.w	r2, r1, r2
 8000d40:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000d44:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	13db      	asrs	r3, r3, #15
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	13d2      	asrs	r2, r2, #15
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	7e12      	ldrb	r2, [r2, #24]
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000d70:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8000d78:	bfa8      	it	ge
 8000d7a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8000d7e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	131b      	asrs	r3, r3, #12
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	371c      	adds	r7, #28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000da4:	2b60      	cmp	r3, #96	; 0x60
 8000da6:	d007      	beq.n	8000db8 <bmp280_read_fixed+0x28>
		if (humidity)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <bmp280_read_fixed+0x32>
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	e000      	b.n	8000dc4 <bmp280_read_fixed+0x34>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8000dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f107 0218 	add.w	r2, r7, #24
 8000dce:	21f7      	movs	r1, #247	; 0xf7
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff fc5f 	bl	8000694 <read_data>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <bmp280_read_fixed+0x50>
		return false;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e038      	b.n	8000e52 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8000de0:	7e3b      	ldrb	r3, [r7, #24]
 8000de2:	031a      	lsls	r2, r3, #12
 8000de4:	7e7b      	ldrb	r3, [r7, #25]
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	4313      	orrs	r3, r2
 8000dea:	7eba      	ldrb	r2, [r7, #26]
 8000dec:	0912      	lsrs	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	4313      	orrs	r3, r2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8000df4:	7efb      	ldrb	r3, [r7, #27]
 8000df6:	031a      	lsls	r2, r3, #12
 8000df8:	7f3b      	ldrb	r3, [r7, #28]
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	7f7a      	ldrb	r2, [r7, #29]
 8000e00:	0912      	lsrs	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	4313      	orrs	r3, r2
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff fc67 	bl	80006e4 <compensate_temperature>
 8000e16:	4602      	mov	r2, r0
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f7ff fc97 	bl	8000756 <compensate_pressure>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00d      	beq.n	8000e50 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8000e34:	7fbb      	ldrb	r3, [r7, #30]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	7ffa      	ldrb	r2, [r7, #31]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	461a      	mov	r2, r3
 8000e42:	6a39      	ldr	r1, [r7, #32]
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	f7ff ff44 	bl	8000cd2 <compensate_humidity>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	601a      	str	r2, [r3, #0]
	}

	return true;
 8000e50:	2301      	movs	r3, #1
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3730      	adds	r7, #48	; 0x30
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b096      	sub	sp, #88	; 0x58
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e62:	f000 fadb 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e66:	f000 f84b 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6a:	f000 f90f 	bl	800108c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e6e:	f000 f8e3 	bl	8001038 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e72:	f000 f8b3 	bl	8000fdc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	  bmp280_params_t params;
      bmp280_init_default_params(&params);
 8000e76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fbee 	bl	800065c <bmp280_init_default_params>
      BMP280_HandleTypedef bmp280;
      bmp280.i2c=&hi2c1;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <main+0x94>)
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  while (1)
  {
	  	  	  int32_t temperature;
	          uint32_t pressure;

	          bmp280_read_fixed(&bmp280, &temperature, &pressure, NULL);
 8000e84:	463a      	mov	r2, r7
 8000e86:	1d39      	adds	r1, r7, #4
 8000e88:	f107 001c 	add.w	r0, r7, #28
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f7ff ff7f 	bl	8000d90 <bmp280_read_fixed>
	              // Temperature is in degrees Celsius, pressure is in Pascals

	              // Handle BMP280 reading error


	          sprintf(buf, "Temperature: %ld\r\n", temperature);
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	4916      	ldr	r1, [pc, #88]	; (8000ef4 <main+0x98>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fd80 	bl	80039a0 <siprintf>
	          HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f9b3 	bl	8000210 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	f107 0108 	add.w	r1, r7, #8
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <main+0x9c>)
 8000eb8:	f002 f9fd 	bl	80032b6 <HAL_UART_Transmit>

	          sprintf(buf, "Pressure: %lu Pa\r\n", pressure);
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	490e      	ldr	r1, [pc, #56]	; (8000efc <main+0xa0>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fd6b 	bl	80039a0 <siprintf>
	          HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f99e 	bl	8000210 <strlen>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	f107 0108 	add.w	r1, r7, #8
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <main+0x9c>)
 8000ee2:	f002 f9e8 	bl	80032b6 <HAL_UART_Transmit>



	          HAL_Delay(1000); // Delay between readings
 8000ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eea:	f000 fb09 	bl	8001500 <HAL_Delay>
  {
 8000eee:	e7c9      	b.n	8000e84 <main+0x28>
 8000ef0:	20000078 	.word	0x20000078
 8000ef4:	08004300 	.word	0x08004300
 8000ef8:	200000cc 	.word	0x200000cc
 8000efc:	08004314 	.word	0x08004314

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2234      	movs	r2, #52	; 0x34
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fd66 	bl	80039e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <SystemClock_Config+0xd4>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a29      	ldr	r2, [pc, #164]	; (8000fd4 <SystemClock_Config+0xd4>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <SystemClock_Config+0xd4>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <SystemClock_Config+0xd8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f4c:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <SystemClock_Config+0xd8>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <SystemClock_Config+0xd8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f74:	2310      	movs	r3, #16
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f78:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fea6 	bl	8002ce0 <HAL_RCC_OscConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f9a:	f000 f8e5 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fb46 	bl	800264c <HAL_RCC_ClockConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fc6:	f000 f8cf 	bl	8001168 <Error_Handler>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3750      	adds	r7, #80	; 0x50
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000

08000fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_I2C1_Init+0x50>)
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <MX_I2C1_Init+0x54>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_I2C1_Init+0x50>)
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <MX_I2C1_Init+0x58>)
 8000fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_I2C1_Init+0x50>)
 8000ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <MX_I2C1_Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_I2C1_Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <MX_I2C1_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_I2C1_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_I2C1_Init+0x50>)
 800101a:	f000 fd29 	bl	8001a70 <HAL_I2C_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001024:	f000 f8a0 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000078 	.word	0x20000078
 8001030:	40005400 	.word	0x40005400
 8001034:	000186a0 	.word	0x000186a0

08001038 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_USART2_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001070:	f002 f8d4 	bl	800321c <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f000 f875 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000cc 	.word	0x200000cc
 8001088:	40004400 	.word	0x40004400

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_GPIO_Init+0xd0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a2c      	ldr	r2, [pc, #176]	; (800115c <MX_GPIO_Init+0xd0>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_GPIO_Init+0xd0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_GPIO_Init+0xd0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <MX_GPIO_Init+0xd0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_GPIO_Init+0xd0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <MX_GPIO_Init+0xd0>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_GPIO_Init+0xd0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_GPIO_Init+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_GPIO_Init+0xd0>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <MX_GPIO_Init+0xd4>)
 8001118:	f000 fc90 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800111c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001122:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_GPIO_Init+0xd8>)
 8001134:	f000 faee 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001138:	2320      	movs	r3, #32
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_GPIO_Init+0xd4>)
 8001150:	f000 fae0 	bl	8001714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020800 	.word	0x40020800

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	e7fe      	b.n	8001170 <Error_Handler+0x8>
	...

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_MspInit+0x4c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011b2:	2007      	movs	r0, #7
 80011b4:	f000 fa7a 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_I2C_MspInit+0x84>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12b      	bne.n	800123e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_I2C_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_I2C_MspInit+0x88>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_I2C_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001202:	23c0      	movs	r3, #192	; 0xc0
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001206:	2312      	movs	r3, #18
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001212:	2304      	movs	r3, #4
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <HAL_I2C_MspInit+0x8c>)
 800121e:	f000 fa79 	bl	8001714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_I2C_MspInit+0x88>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_I2C_MspInit+0x88>)
 800122c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_I2C_MspInit+0x88>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40005400 	.word	0x40005400
 800124c:	40023800 	.word	0x40023800
 8001250:	40020400 	.word	0x40020400

08001254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_UART_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12b      	bne.n	80012ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_UART_MspInit+0x88>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_UART_MspInit+0x88>)
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_UART_MspInit+0x88>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_UART_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_UART_MspInit+0x88>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_UART_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ae:	230c      	movs	r3, #12
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012be:	2307      	movs	r3, #7
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_UART_MspInit+0x8c>)
 80012ca:	f000 fa23 	bl	8001714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40004400 	.word	0x40004400
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001330:	f000 f8c6 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f002 fb42 	bl	80039f0 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20020000 	.word	0x20020000
 8001398:	00000400 	.word	0x00000400
 800139c:	20000110 	.word	0x20000110
 80013a0:	20000260 	.word	0x20000260

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ce:	490e      	ldr	r1, [pc, #56]	; (8001408 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e4:	4c0b      	ldr	r4, [pc, #44]	; (8001414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f2:	f7ff ffd7 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f002 fb01 	bl	80039fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff fd2f 	bl	8000e5c <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800140c:	08004384 	.word	0x08004384
  ldr r2, =_sbss
 8001410:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001414:	20000260 	.word	0x20000260

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_Init+0x40>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_Init+0x40>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_Init+0x40>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f931 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	2000      	movs	r0, #0
 800144c:	f000 f808 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fe90 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x54>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x58>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f93b 	bl	80016fa <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 f911 	bl	80016c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <HAL_InitTick+0x5c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000004 	.word	0x20000004

080014c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000114 	.word	0x20000114

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000114 	.word	0x20000114

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff ffee 	bl	80014e8 <HAL_GetTick>
 800150c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d005      	beq.n	8001526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_Delay+0x44>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001526:	bf00      	nop
 8001528:	f7ff ffde 	bl	80014e8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_Delay+0x28>
  {
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	; (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ff8e 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff47 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d4:	f7ff ff5c 	bl	8001590 <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff8e 	bl	8001600 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5d 	bl	80015ac <__NVIC_SetPriority>
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffb0 	bl	8001668 <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e165      	b.n	80019fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	f040 8154 	bne.w	80019f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d005      	beq.n	8001766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	2b02      	cmp	r3, #2
 8001764:	d130      	bne.n	80017c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d123      	bne.n	8001858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	69b9      	ldr	r1, [r7, #24]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80ae 	beq.w	80019f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a5c      	ldr	r2, [pc, #368]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b5a      	ldr	r3, [pc, #360]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b6:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_GPIO_Init+0x304>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4f      	ldr	r2, [pc, #316]	; (8001a1c <HAL_GPIO_Init+0x308>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d025      	beq.n	800192e <HAL_GPIO_Init+0x21a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <HAL_GPIO_Init+0x216>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4d      	ldr	r2, [pc, #308]	; (8001a24 <HAL_GPIO_Init+0x310>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x212>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4c      	ldr	r2, [pc, #304]	; (8001a28 <HAL_GPIO_Init+0x314>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x20e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4b      	ldr	r2, [pc, #300]	; (8001a2c <HAL_GPIO_Init+0x318>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x20a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4a      	ldr	r2, [pc, #296]	; (8001a30 <HAL_GPIO_Init+0x31c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x206>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a49      	ldr	r2, [pc, #292]	; (8001a34 <HAL_GPIO_Init+0x320>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x202>
 8001912:	2306      	movs	r3, #6
 8001914:	e00c      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 8001916:	2307      	movs	r3, #7
 8001918:	e00a      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800191a:	2305      	movs	r3, #5
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800191e:	2304      	movs	r3, #4
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x21c>
 800192e:	2300      	movs	r3, #0
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001940:	4935      	ldr	r1, [pc, #212]	; (8001a18 <HAL_GPIO_Init+0x304>)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_GPIO_Init+0x324>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001972:	4a31      	ldr	r2, [pc, #196]	; (8001a38 <HAL_GPIO_Init+0x324>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_GPIO_Init+0x324>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800199c:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_GPIO_Init+0x324>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_GPIO_Init+0x324>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <HAL_GPIO_Init+0x324>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_GPIO_Init+0x324>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_GPIO_Init+0x324>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f67f ae96 	bls.w	8001730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40021400 	.word	0x40021400
 8001a34:	40021800 	.word	0x40021800
 8001a38:	40013c00 	.word	0x40013c00

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	619a      	str	r2, [r3, #24]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e12b      	b.n	8001cda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fb94 	bl	80011c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2224      	movs	r2, #36	; 0x24
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ad4:	f000 feac 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8001ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4a81      	ldr	r2, [pc, #516]	; (8001ce4 <HAL_I2C_Init+0x274>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d807      	bhi.n	8001af4 <HAL_I2C_Init+0x84>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a80      	ldr	r2, [pc, #512]	; (8001ce8 <HAL_I2C_Init+0x278>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	bf94      	ite	ls
 8001aec:	2301      	movls	r3, #1
 8001aee:	2300      	movhi	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e006      	b.n	8001b02 <HAL_I2C_Init+0x92>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a7d      	ldr	r2, [pc, #500]	; (8001cec <HAL_I2C_Init+0x27c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	bf94      	ite	ls
 8001afc:	2301      	movls	r3, #1
 8001afe:	2300      	movhi	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0e7      	b.n	8001cda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4a78      	ldr	r2, [pc, #480]	; (8001cf0 <HAL_I2C_Init+0x280>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9b      	lsrs	r3, r3, #18
 8001b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a6a      	ldr	r2, [pc, #424]	; (8001ce4 <HAL_I2C_Init+0x274>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d802      	bhi.n	8001b44 <HAL_I2C_Init+0xd4>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3301      	adds	r3, #1
 8001b42:	e009      	b.n	8001b58 <HAL_I2C_Init+0xe8>
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	4a69      	ldr	r2, [pc, #420]	; (8001cf4 <HAL_I2C_Init+0x284>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	3301      	adds	r3, #1
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	495c      	ldr	r1, [pc, #368]	; (8001ce4 <HAL_I2C_Init+0x274>)
 8001b74:	428b      	cmp	r3, r1
 8001b76:	d819      	bhi.n	8001bac <HAL_I2C_Init+0x13c>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1e59      	subs	r1, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b86:	1c59      	adds	r1, r3, #1
 8001b88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00a      	beq.n	8001ba8 <HAL_I2C_Init+0x138>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1e59      	subs	r1, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba6:	e051      	b.n	8001c4c <HAL_I2C_Init+0x1dc>
 8001ba8:	2304      	movs	r3, #4
 8001baa:	e04f      	b.n	8001c4c <HAL_I2C_Init+0x1dc>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d111      	bne.n	8001bd8 <HAL_I2C_Init+0x168>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1e58      	subs	r0, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	440b      	add	r3, r1
 8001bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e012      	b.n	8001bfe <HAL_I2C_Init+0x18e>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1e58      	subs	r0, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	0099      	lsls	r1, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Init+0x196>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e022      	b.n	8001c4c <HAL_I2C_Init+0x1dc>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10e      	bne.n	8001c2c <HAL_I2C_Init+0x1bc>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1e58      	subs	r0, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	440b      	add	r3, r1
 8001c1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2a:	e00f      	b.n	8001c4c <HAL_I2C_Init+0x1dc>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1e58      	subs	r0, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	0099      	lsls	r1, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	6809      	ldr	r1, [r1, #0]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6911      	ldr	r1, [r2, #16]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68d2      	ldr	r2, [r2, #12]
 8001c86:	4311      	orrs	r1, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	000186a0 	.word	0x000186a0
 8001ce8:	001e847f 	.word	0x001e847f
 8001cec:	003d08ff 	.word	0x003d08ff
 8001cf0:	431bde83 	.word	0x431bde83
 8001cf4:	10624dd3 	.word	0x10624dd3

08001cf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	4608      	mov	r0, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	817b      	strh	r3, [r7, #10]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	813b      	strh	r3, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d12:	f7ff fbe9 	bl	80014e8 <HAL_GetTick>
 8001d16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	f040 8208 	bne.w	8002136 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2319      	movs	r3, #25
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	497b      	ldr	r1, [pc, #492]	; (8001f1c <HAL_I2C_Mem_Read+0x224>)
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 faef 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e1fb      	b.n	8002138 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_I2C_Mem_Read+0x56>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e1f4      	b.n	8002138 <HAL_I2C_Mem_Read+0x440>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d007      	beq.n	8001d74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2222      	movs	r2, #34	; 0x22
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a5b      	ldr	r2, [pc, #364]	; (8001f20 <HAL_I2C_Mem_Read+0x228>)
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001db6:	88f8      	ldrh	r0, [r7, #6]
 8001db8:	893a      	ldrh	r2, [r7, #8]
 8001dba:	8979      	ldrh	r1, [r7, #10]
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f9bc 	bl	8002144 <I2C_RequestMemoryRead>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1b0      	b.n	8002138 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d113      	bne.n	8001e06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	623b      	str	r3, [r7, #32]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	623b      	str	r3, [r7, #32]
 8001df2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e184      	b.n	8002110 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d11b      	bne.n	8001e46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e164      	b.n	8002110 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d11b      	bne.n	8001e86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	e144      	b.n	8002110 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e9c:	e138      	b.n	8002110 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	f200 80f1 	bhi.w	800208a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d123      	bne.n	8001ef8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 fb44 	bl	8002542 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e139      	b.n	8002138 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ef6:	e10b      	b.n	8002110 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d14e      	bne.n	8001f9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f06:	2200      	movs	r2, #0
 8001f08:	4906      	ldr	r1, [pc, #24]	; (8001f24 <HAL_I2C_Mem_Read+0x22c>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fa02 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e10e      	b.n	8002138 <HAL_I2C_Mem_Read+0x440>
 8001f1a:	bf00      	nop
 8001f1c:	00100002 	.word	0x00100002
 8001f20:	ffff0000 	.word	0xffff0000
 8001f24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f9c:	e0b8      	b.n	8002110 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4966      	ldr	r1, [pc, #408]	; (8002140 <HAL_I2C_Mem_Read+0x448>)
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f9b3 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0bf      	b.n	8002138 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	2200      	movs	r2, #0
 8002002:	494f      	ldr	r1, [pc, #316]	; (8002140 <HAL_I2C_Mem_Read+0x448>)
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f985 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e091      	b.n	8002138 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002088:	e042      	b.n	8002110 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fa57 	bl	8002542 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e04c      	b.n	8002138 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d118      	bne.n	8002110 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	f47f aec2 	bne.w	8001e9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	00010004 	.word	0x00010004

08002144 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	817b      	strh	r3, [r7, #10]
 8002156:	460b      	mov	r3, r1
 8002158:	813b      	strh	r3, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800216c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	2200      	movs	r2, #0
 8002186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f8c2 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00d      	beq.n	80021b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a4:	d103      	bne.n	80021ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0aa      	b.n	8002308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	4952      	ldr	r1, [pc, #328]	; (8002310 <I2C_RequestMemoryRead+0x1cc>)
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f8fa 	bl	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e097      	b.n	8002308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	6a39      	ldr	r1, [r7, #32]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f964 	bl	80024c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	2b04      	cmp	r3, #4
 8002204:	d107      	bne.n	8002216 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002214:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e076      	b.n	8002308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002220:	893b      	ldrh	r3, [r7, #8]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	611a      	str	r2, [r3, #16]
 800222a:	e021      	b.n	8002270 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800222c:	893b      	ldrh	r3, [r7, #8]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	b29b      	uxth	r3, r3
 8002232:	b2da      	uxtb	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800223a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223c:	6a39      	ldr	r1, [r7, #32]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f93e 	bl	80024c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b04      	cmp	r3, #4
 8002250:	d107      	bne.n	8002262 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002260:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e050      	b.n	8002308 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002266:	893b      	ldrh	r3, [r7, #8]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	6a39      	ldr	r1, [r7, #32]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f923 	bl	80024c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00d      	beq.n	800229c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	2b04      	cmp	r3, #4
 8002286:	d107      	bne.n	8002298 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002296:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e035      	b.n	8002308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f82b 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00d      	beq.n	80022e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d2:	d103      	bne.n	80022dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e013      	b.n	8002308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022e0:	897b      	ldrh	r3, [r7, #10]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	6a3a      	ldr	r2, [r7, #32]
 80022f4:	4906      	ldr	r1, [pc, #24]	; (8002310 <I2C_RequestMemoryRead+0x1cc>)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f863 	bl	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	00010002 	.word	0x00010002

08002314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002324:	e025      	b.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d021      	beq.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232e:	f7ff f8db 	bl	80014e8 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d302      	bcc.n	8002344 <I2C_WaitOnFlagUntilTimeout+0x30>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d116      	bne.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f043 0220 	orr.w	r2, r3, #32
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e023      	b.n	80023ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10d      	bne.n	8002398 <I2C_WaitOnFlagUntilTimeout+0x84>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4013      	ands	r3, r2
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	e00c      	b.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4013      	ands	r3, r2
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d0b6      	beq.n	8002326 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023d0:	e051      	b.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e0:	d123      	bne.n	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f043 0204 	orr.w	r2, r3, #4
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e046      	b.n	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d021      	beq.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7ff f859 	bl	80014e8 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f043 0220 	orr.w	r2, r3, #32
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e020      	b.n	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d10c      	bne.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	e00b      	b.n	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4013      	ands	r3, r2
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf14      	ite	ne
 80024ac:	2301      	movne	r3, #1
 80024ae:	2300      	moveq	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d18d      	bne.n	80023d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024cc:	e02d      	b.n	800252a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f88d 	bl	80025ee <I2C_IsAcknowledgeFailed>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e02d      	b.n	800253a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d021      	beq.n	800252a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7fe ffff 	bl	80014e8 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d116      	bne.n	800252a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b80      	cmp	r3, #128	; 0x80
 8002536:	d1ca      	bne.n	80024ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800254e:	e042      	b.n	80025d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b10      	cmp	r3, #16
 800255c:	d119      	bne.n	8002592 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0210 	mvn.w	r2, #16
 8002566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e029      	b.n	80025e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7fe ffa9 	bl	80014e8 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d302      	bcc.n	80025a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d116      	bne.n	80025d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f043 0220 	orr.w	r2, r3, #32
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e007      	b.n	80025e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d1b5      	bne.n	8002550 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	d11b      	bne.n	800263e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800260e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0204 	orr.w	r2, r3, #4
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0cc      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b68      	ldr	r3, [pc, #416]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d90c      	bls.n	8002688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b65      	ldr	r3, [pc, #404]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0b8      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a0:	4b59      	ldr	r3, [pc, #356]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	4b50      	ldr	r3, [pc, #320]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	494d      	ldr	r1, [pc, #308]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d044      	beq.n	800276c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d119      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d003      	beq.n	800270a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002706:	2b03      	cmp	r3, #3
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e06f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e067      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b37      	ldr	r3, [pc, #220]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4934      	ldr	r1, [pc, #208]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800273c:	f7fe fed4 	bl	80014e8 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7fe fed0 	bl	80014e8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e04f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d20c      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b22      	ldr	r3, [pc, #136]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e032      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4916      	ldr	r1, [pc, #88]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	490e      	ldr	r1, [pc, #56]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d2:	f000 f855 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	490a      	ldr	r1, [pc, #40]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	5ccb      	ldrb	r3, [r1, r3]
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fe34 	bl	8001460 <HAL_InitTick>

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023c00 	.word	0x40023c00
 8002808:	40023800 	.word	0x40023800
 800280c:	08004328 	.word	0x08004328
 8002810:	20000000 	.word	0x20000000
 8002814:	20000004 	.word	0x20000004

08002818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_RCC_GetHCLKFreq+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002834:	f7ff fff0 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0a9b      	lsrs	r3, r3, #10
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4903      	ldr	r1, [pc, #12]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	08004338 	.word	0x08004338

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800285c:	f7ff ffdc 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0b5b      	lsrs	r3, r3, #13
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	; (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	08004338 	.word	0x08004338

08002880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002884:	b0ae      	sub	sp, #184	; 0xb8
 8002886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a6:	4bcb      	ldr	r3, [pc, #812]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	f200 8206 	bhi.w	8002cc0 <HAL_RCC_GetSysClockFreq+0x440>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028f1 	.word	0x080028f1
 80028c0:	08002cc1 	.word	0x08002cc1
 80028c4:	08002cc1 	.word	0x08002cc1
 80028c8:	08002cc1 	.word	0x08002cc1
 80028cc:	080028f9 	.word	0x080028f9
 80028d0:	08002cc1 	.word	0x08002cc1
 80028d4:	08002cc1 	.word	0x08002cc1
 80028d8:	08002cc1 	.word	0x08002cc1
 80028dc:	08002901 	.word	0x08002901
 80028e0:	08002cc1 	.word	0x08002cc1
 80028e4:	08002cc1 	.word	0x08002cc1
 80028e8:	08002cc1 	.word	0x08002cc1
 80028ec:	08002af1 	.word	0x08002af1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4bb9      	ldr	r3, [pc, #740]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x358>)
 80028f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80028f6:	e1e7      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f8:	4bb8      	ldr	r3, [pc, #736]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x35c>)
 80028fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028fe:	e1e3      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002900:	4bb4      	ldr	r3, [pc, #720]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290c:	4bb1      	ldr	r3, [pc, #708]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d071      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002918:	4bae      	ldr	r3, [pc, #696]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002924:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800292c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800293a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800293e:	4622      	mov	r2, r4
 8002940:	462b      	mov	r3, r5
 8002942:	f04f 0000 	mov.w	r0, #0
 8002946:	f04f 0100 	mov.w	r1, #0
 800294a:	0159      	lsls	r1, r3, #5
 800294c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002950:	0150      	lsls	r0, r2, #5
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4621      	mov	r1, r4
 8002958:	1a51      	subs	r1, r2, r1
 800295a:	6439      	str	r1, [r7, #64]	; 0x40
 800295c:	4629      	mov	r1, r5
 800295e:	eb63 0301 	sbc.w	r3, r3, r1
 8002962:	647b      	str	r3, [r7, #68]	; 0x44
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002970:	4649      	mov	r1, r9
 8002972:	018b      	lsls	r3, r1, #6
 8002974:	4641      	mov	r1, r8
 8002976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800297a:	4641      	mov	r1, r8
 800297c:	018a      	lsls	r2, r1, #6
 800297e:	4641      	mov	r1, r8
 8002980:	1a51      	subs	r1, r2, r1
 8002982:	63b9      	str	r1, [r7, #56]	; 0x38
 8002984:	4649      	mov	r1, r9
 8002986:	eb63 0301 	sbc.w	r3, r3, r1
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002998:	4649      	mov	r1, r9
 800299a:	00cb      	lsls	r3, r1, #3
 800299c:	4641      	mov	r1, r8
 800299e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029a2:	4641      	mov	r1, r8
 80029a4:	00ca      	lsls	r2, r1, #3
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	4622      	mov	r2, r4
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
 80029b2:	462b      	mov	r3, r5
 80029b4:	460a      	mov	r2, r1
 80029b6:	eb42 0303 	adc.w	r3, r2, r3
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029c8:	4629      	mov	r1, r5
 80029ca:	024b      	lsls	r3, r1, #9
 80029cc:	4621      	mov	r1, r4
 80029ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029d2:	4621      	mov	r1, r4
 80029d4:	024a      	lsls	r2, r1, #9
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029ec:	f7fd fcb8 	bl	8000360 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4613      	mov	r3, r2
 80029f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029fa:	e067      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fc:	4b75      	ldr	r3, [pc, #468]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a08:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a14:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a16:	2300      	movs	r3, #0
 8002a18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002a1e:	4622      	mov	r2, r4
 8002a20:	462b      	mov	r3, r5
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	0159      	lsls	r1, r3, #5
 8002a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a30:	0150      	lsls	r0, r2, #5
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4621      	mov	r1, r4
 8002a38:	1a51      	subs	r1, r2, r1
 8002a3a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002a50:	4649      	mov	r1, r9
 8002a52:	018b      	lsls	r3, r1, #6
 8002a54:	4641      	mov	r1, r8
 8002a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a5a:	4641      	mov	r1, r8
 8002a5c:	018a      	lsls	r2, r1, #6
 8002a5e:	4641      	mov	r1, r8
 8002a60:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a64:	4649      	mov	r1, r9
 8002a66:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a7e:	4692      	mov	sl, r2
 8002a80:	469b      	mov	fp, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	eb1a 0303 	adds.w	r3, sl, r3
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	462b      	mov	r3, r5
 8002a8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	028b      	lsls	r3, r1, #10
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	028a      	lsls	r2, r1, #10
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ab8:	677a      	str	r2, [r7, #116]	; 0x74
 8002aba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002abe:	f7fd fc4f 	bl	8000360 <__aeabi_uldivmod>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002acc:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	0c1b      	lsrs	r3, r3, #16
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002aee:	e0eb      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af0:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afc:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d06b      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b08:	4b32      	ldr	r3, [pc, #200]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	2200      	movs	r2, #0
 8002b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002b24:	4622      	mov	r2, r4
 8002b26:	462b      	mov	r3, r5
 8002b28:	f04f 0000 	mov.w	r0, #0
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	0159      	lsls	r1, r3, #5
 8002b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b36:	0150      	lsls	r0, r2, #5
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	1a51      	subs	r1, r2, r1
 8002b40:	61b9      	str	r1, [r7, #24]
 8002b42:	4629      	mov	r1, r5
 8002b44:	eb63 0301 	sbc.w	r3, r3, r1
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b56:	4659      	mov	r1, fp
 8002b58:	018b      	lsls	r3, r1, #6
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b60:	4651      	mov	r1, sl
 8002b62:	018a      	lsls	r2, r1, #6
 8002b64:	4651      	mov	r1, sl
 8002b66:	ebb2 0801 	subs.w	r8, r2, r1
 8002b6a:	4659      	mov	r1, fp
 8002b6c:	eb63 0901 	sbc.w	r9, r3, r1
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b84:	4690      	mov	r8, r2
 8002b86:	4699      	mov	r9, r3
 8002b88:	4623      	mov	r3, r4
 8002b8a:	eb18 0303 	adds.w	r3, r8, r3
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	462b      	mov	r3, r5
 8002b92:	eb49 0303 	adc.w	r3, r9, r3
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	024b      	lsls	r3, r1, #9
 8002ba8:	4621      	mov	r1, r4
 8002baa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bae:	4621      	mov	r1, r4
 8002bb0:	024a      	lsls	r2, r1, #9
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bba:	2200      	movs	r2, #0
 8002bbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bbe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bc4:	f7fd fbcc 	bl	8000360 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bd2:	e065      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x420>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be0:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	2200      	movs	r2, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	4611      	mov	r1, r2
 8002bec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	657b      	str	r3, [r7, #84]	; 0x54
 8002bf6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002bfa:	4642      	mov	r2, r8
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	f04f 0000 	mov.w	r0, #0
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	0159      	lsls	r1, r3, #5
 8002c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0c:	0150      	lsls	r0, r2, #5
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4641      	mov	r1, r8
 8002c14:	1a51      	subs	r1, r2, r1
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	4649      	mov	r1, r9
 8002c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c2c:	4659      	mov	r1, fp
 8002c2e:	018b      	lsls	r3, r1, #6
 8002c30:	4651      	mov	r1, sl
 8002c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c36:	4651      	mov	r1, sl
 8002c38:	018a      	lsls	r2, r1, #6
 8002c3a:	4651      	mov	r1, sl
 8002c3c:	1a54      	subs	r4, r2, r1
 8002c3e:	4659      	mov	r1, fp
 8002c40:	eb63 0501 	sbc.w	r5, r3, r1
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	00eb      	lsls	r3, r5, #3
 8002c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c52:	00e2      	lsls	r2, r4, #3
 8002c54:	4614      	mov	r4, r2
 8002c56:	461d      	mov	r5, r3
 8002c58:	4643      	mov	r3, r8
 8002c5a:	18e3      	adds	r3, r4, r3
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	464b      	mov	r3, r9
 8002c60:	eb45 0303 	adc.w	r3, r5, r3
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c72:	4629      	mov	r1, r5
 8002c74:	028b      	lsls	r3, r1, #10
 8002c76:	4621      	mov	r1, r4
 8002c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	028a      	lsls	r2, r1, #10
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c88:	2200      	movs	r2, #0
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c92:	f7fd fb65 	bl	8000360 <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0f1b      	lsrs	r3, r3, #28
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cbe:	e003      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	37b8      	adds	r7, #184	; 0xb8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00f42400 	.word	0x00f42400

08002ce0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e28d      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8083 	beq.w	8002e06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d00:	4b94      	ldr	r3, [pc, #592]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d019      	beq.n	8002d40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d0c:	4b91      	ldr	r3, [pc, #580]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d18:	4b8e      	ldr	r3, [pc, #568]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b8b      	ldr	r3, [pc, #556]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b88      	ldr	r3, [pc, #544]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b84      	ldr	r3, [pc, #528]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x124>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d157      	bne.n	8002e04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e25a      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x90>
 8002d62:	4b7c      	ldr	r3, [pc, #496]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7b      	ldr	r2, [pc, #492]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xcc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0xb4>
 8002d7a:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a75      	ldr	r2, [pc, #468]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b73      	ldr	r3, [pc, #460]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a72      	ldr	r2, [pc, #456]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xcc>
 8002d94:	4b6f      	ldr	r3, [pc, #444]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6e      	ldr	r2, [pc, #440]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b6c      	ldr	r3, [pc, #432]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6b      	ldr	r2, [pc, #428]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe fb98 	bl	80014e8 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe fb94 	bl	80014e8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e21f      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xdc>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fb84 	bl	80014e8 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe fb80 	bl	80014e8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e20b      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b57      	ldr	r3, [pc, #348]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x104>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d06f      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e12:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e1e:	4b4d      	ldr	r3, [pc, #308]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d105      	bne.n	8002e36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d11c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e42:	4b44      	ldr	r3, [pc, #272]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_RCC_OscConfig+0x186>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1d3      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4937      	ldr	r1, [pc, #220]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	e03a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d020      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e84:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_RCC_OscConfig+0x278>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fb2d 	bl	80014e8 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fe fb29 	bl	80014e8 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e1b4      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4925      	ldr	r1, [pc, #148]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_OscConfig+0x278>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fb0c 	bl	80014e8 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fb08 	bl	80014e8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e193      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d036      	beq.n	8002f6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_RCC_OscConfig+0x27c>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe faec 	bl	80014e8 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe fae8 	bl	80014e8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e173      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x234>
 8002f32:	e01b      	b.n	8002f6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_OscConfig+0x27c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fad5 	bl	80014e8 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	e00e      	b.n	8002f60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f42:	f7fe fad1 	bl	80014e8 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d907      	bls.n	8002f60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e15c      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
 8002f54:	40023800 	.word	0x40023800
 8002f58:	42470000 	.word	0x42470000
 8002f5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	4b8a      	ldr	r3, [pc, #552]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ea      	bne.n	8002f42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8097 	beq.w	80030a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7e:	4b83      	ldr	r3, [pc, #524]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b7f      	ldr	r3, [pc, #508]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a7e      	ldr	r2, [pc, #504]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b7c      	ldr	r3, [pc, #496]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b79      	ldr	r3, [pc, #484]	; (8003190 <HAL_RCC_OscConfig+0x4b0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb6:	4b76      	ldr	r3, [pc, #472]	; (8003190 <HAL_RCC_OscConfig+0x4b0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a75      	ldr	r2, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x4b0>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fa91 	bl	80014e8 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fe fa8d 	bl	80014e8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e118      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	; (8003190 <HAL_RCC_OscConfig+0x4b0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x31e>
 8002ff0:	4b66      	ldr	r3, [pc, #408]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4a65      	ldr	r2, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffc:	e01c      	b.n	8003038 <HAL_RCC_OscConfig+0x358>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x340>
 8003006:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a60      	ldr	r2, [pc, #384]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 800300c:	f043 0304 	orr.w	r3, r3, #4
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	4b5e      	ldr	r3, [pc, #376]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a5d      	ldr	r2, [pc, #372]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0x358>
 8003020:	4b5a      	ldr	r3, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a59      	ldr	r2, [pc, #356]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
 800302c:	4b57      	ldr	r3, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a56      	ldr	r2, [pc, #344]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003032:	f023 0304 	bic.w	r3, r3, #4
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe fa52 	bl	80014e8 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	e00a      	b.n	800305e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe fa4e 	bl	80014e8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0d7      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ee      	beq.n	8003048 <HAL_RCC_OscConfig+0x368>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe fa3c 	bl	80014e8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	e00a      	b.n	800308a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fe fa38 	bl	80014e8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0c1      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308a:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ee      	bne.n	8003074 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4a3a      	ldr	r2, [pc, #232]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80ad 	beq.w	800320c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d060      	beq.n	8003180 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d145      	bne.n	8003152 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <HAL_RCC_OscConfig+0x4b4>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fa0c 	bl	80014e8 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fe fa08 	bl	80014e8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e093      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	4b29      	ldr	r3, [pc, #164]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	019b      	lsls	r3, r3, #6
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	3b01      	subs	r3, #1
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	491b      	ldr	r1, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x4b4>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe f9dd 	bl	80014e8 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003132:	f7fe f9d9 	bl	80014e8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e064      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x452>
 8003150:	e05c      	b.n	800320c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_RCC_OscConfig+0x4b4>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe f9c6 	bl	80014e8 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe f9c2 	bl	80014e8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e04d      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCC_OscConfig+0x4ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x480>
 800317e:	e045      	b.n	800320c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e040      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
 8003194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003198:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <HAL_RCC_OscConfig+0x538>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d030      	beq.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d129      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d122      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d119      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d10f      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e03f      	b.n	80032ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fe f806 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2224      	movs	r2, #36	; 0x24
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f929 	bl	80034b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b08a      	sub	sp, #40	; 0x28
 80032ba:	af02      	add	r7, sp, #8
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d17c      	bne.n	80033d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_UART_Transmit+0x2c>
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e075      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Transmit+0x3e>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e06e      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2221      	movs	r2, #33	; 0x21
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330a:	f7fe f8ed 	bl	80014e8 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d108      	bne.n	8003338 <HAL_UART_Transmit+0x82>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e003      	b.n	8003340 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003348:	e02a      	b.n	80033a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f840 	bl	80033da <UART_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e036      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003378:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	3302      	adds	r3, #2
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	e007      	b.n	8003392 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	3301      	adds	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1cf      	bne.n	800334a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2140      	movs	r1, #64	; 0x40
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f810 	bl	80033da <UART_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e006      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b090      	sub	sp, #64	; 0x40
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ea:	e050      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d04c      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <UART_WaitOnFlagUntilTimeout+0x30>
 80033fa:	f7fe f875 	bl	80014e8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003406:	429a      	cmp	r2, r3
 8003408:	d241      	bcs.n	800348e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800342a:	637a      	str	r2, [r7, #52]	; 0x34
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e5      	bne.n	800340a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3314      	adds	r3, #20
 8003444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	613b      	str	r3, [r7, #16]
   return(result);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	63bb      	str	r3, [r7, #56]	; 0x38
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3314      	adds	r3, #20
 800345c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800345e:	623a      	str	r2, [r7, #32]
 8003460:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	69f9      	ldr	r1, [r7, #28]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	61bb      	str	r3, [r7, #24]
   return(result);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e5      	bne.n	800343e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e00f      	b.n	80034ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d09f      	beq.n	80033ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3740      	adds	r7, #64	; 0x40
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034bc:	b0c0      	sub	sp, #256	; 0x100
 80034be:	af00      	add	r7, sp, #0
 80034c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	68d9      	ldr	r1, [r3, #12]
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	ea40 0301 	orr.w	r3, r0, r1
 80034e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003510:	f021 010c 	bic.w	r1, r1, #12
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800351e:	430b      	orrs	r3, r1
 8003520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800352e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003532:	6999      	ldr	r1, [r3, #24]
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	ea40 0301 	orr.w	r3, r0, r1
 800353e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b8f      	ldr	r3, [pc, #572]	; (8003784 <UART_SetConfig+0x2cc>)
 8003548:	429a      	cmp	r2, r3
 800354a:	d005      	beq.n	8003558 <UART_SetConfig+0xa0>
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b8d      	ldr	r3, [pc, #564]	; (8003788 <UART_SetConfig+0x2d0>)
 8003554:	429a      	cmp	r2, r3
 8003556:	d104      	bne.n	8003562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003558:	f7ff f97e 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 800355c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003560:	e003      	b.n	800356a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003562:	f7ff f965 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003566:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003574:	f040 810c 	bne.w	8003790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357c:	2200      	movs	r2, #0
 800357e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003582:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800358a:	4622      	mov	r2, r4
 800358c:	462b      	mov	r3, r5
 800358e:	1891      	adds	r1, r2, r2
 8003590:	65b9      	str	r1, [r7, #88]	; 0x58
 8003592:	415b      	adcs	r3, r3
 8003594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800359a:	4621      	mov	r1, r4
 800359c:	eb12 0801 	adds.w	r8, r2, r1
 80035a0:	4629      	mov	r1, r5
 80035a2:	eb43 0901 	adc.w	r9, r3, r1
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ba:	4690      	mov	r8, r2
 80035bc:	4699      	mov	r9, r3
 80035be:	4623      	mov	r3, r4
 80035c0:	eb18 0303 	adds.w	r3, r8, r3
 80035c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035c8:	462b      	mov	r3, r5
 80035ca:	eb49 0303 	adc.w	r3, r9, r3
 80035ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035e6:	460b      	mov	r3, r1
 80035e8:	18db      	adds	r3, r3, r3
 80035ea:	653b      	str	r3, [r7, #80]	; 0x50
 80035ec:	4613      	mov	r3, r2
 80035ee:	eb42 0303 	adc.w	r3, r2, r3
 80035f2:	657b      	str	r3, [r7, #84]	; 0x54
 80035f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035fc:	f7fc feb0 	bl	8000360 <__aeabi_uldivmod>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <UART_SetConfig+0x2d4>)
 8003606:	fba3 2302 	umull	r2, r3, r3, r2
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	011c      	lsls	r4, r3, #4
 800360e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003618:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800361c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	1891      	adds	r1, r2, r2
 8003626:	64b9      	str	r1, [r7, #72]	; 0x48
 8003628:	415b      	adcs	r3, r3
 800362a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800362c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003630:	4641      	mov	r1, r8
 8003632:	eb12 0a01 	adds.w	sl, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb43 0b01 	adc.w	fp, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800364c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003650:	4692      	mov	sl, r2
 8003652:	469b      	mov	fp, r3
 8003654:	4643      	mov	r3, r8
 8003656:	eb1a 0303 	adds.w	r3, sl, r3
 800365a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800365e:	464b      	mov	r3, r9
 8003660:	eb4b 0303 	adc.w	r3, fp, r3
 8003664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003674:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800367c:	460b      	mov	r3, r1
 800367e:	18db      	adds	r3, r3, r3
 8003680:	643b      	str	r3, [r7, #64]	; 0x40
 8003682:	4613      	mov	r3, r2
 8003684:	eb42 0303 	adc.w	r3, r2, r3
 8003688:	647b      	str	r3, [r7, #68]	; 0x44
 800368a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800368e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003692:	f7fc fe65 	bl	8000360 <__aeabi_uldivmod>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4611      	mov	r1, r2
 800369c:	4b3b      	ldr	r3, [pc, #236]	; (800378c <UART_SetConfig+0x2d4>)
 800369e:	fba3 2301 	umull	r2, r3, r3, r1
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2264      	movs	r2, #100	; 0x64
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	1acb      	subs	r3, r1, r3
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <UART_SetConfig+0x2d4>)
 80036b4:	fba3 2302 	umull	r2, r3, r3, r2
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036c0:	441c      	add	r4, r3
 80036c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	1891      	adds	r1, r2, r2
 80036da:	63b9      	str	r1, [r7, #56]	; 0x38
 80036dc:	415b      	adcs	r3, r3
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036e4:	4641      	mov	r1, r8
 80036e6:	1851      	adds	r1, r2, r1
 80036e8:	6339      	str	r1, [r7, #48]	; 0x30
 80036ea:	4649      	mov	r1, r9
 80036ec:	414b      	adcs	r3, r1
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036fc:	4659      	mov	r1, fp
 80036fe:	00cb      	lsls	r3, r1, #3
 8003700:	4651      	mov	r1, sl
 8003702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003706:	4651      	mov	r1, sl
 8003708:	00ca      	lsls	r2, r1, #3
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	4603      	mov	r3, r0
 8003710:	4642      	mov	r2, r8
 8003712:	189b      	adds	r3, r3, r2
 8003714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003718:	464b      	mov	r3, r9
 800371a:	460a      	mov	r2, r1
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003730:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003738:	460b      	mov	r3, r1
 800373a:	18db      	adds	r3, r3, r3
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
 800373e:	4613      	mov	r3, r2
 8003740:	eb42 0303 	adc.w	r3, r2, r3
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800374a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800374e:	f7fc fe07 	bl	8000360 <__aeabi_uldivmod>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4b0d      	ldr	r3, [pc, #52]	; (800378c <UART_SetConfig+0x2d4>)
 8003758:	fba3 1302 	umull	r1, r3, r3, r2
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	2164      	movs	r1, #100	; 0x64
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	3332      	adds	r3, #50	; 0x32
 800376a:	4a08      	ldr	r2, [pc, #32]	; (800378c <UART_SetConfig+0x2d4>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	f003 0207 	and.w	r2, r3, #7
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4422      	add	r2, r4
 800377e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003780:	e106      	b.n	8003990 <UART_SetConfig+0x4d8>
 8003782:	bf00      	nop
 8003784:	40011000 	.word	0x40011000
 8003788:	40011400 	.word	0x40011400
 800378c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003794:	2200      	movs	r2, #0
 8003796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800379a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800379e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037a2:	4642      	mov	r2, r8
 80037a4:	464b      	mov	r3, r9
 80037a6:	1891      	adds	r1, r2, r2
 80037a8:	6239      	str	r1, [r7, #32]
 80037aa:	415b      	adcs	r3, r3
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037b2:	4641      	mov	r1, r8
 80037b4:	1854      	adds	r4, r2, r1
 80037b6:	4649      	mov	r1, r9
 80037b8:	eb43 0501 	adc.w	r5, r3, r1
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	00eb      	lsls	r3, r5, #3
 80037c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ca:	00e2      	lsls	r2, r4, #3
 80037cc:	4614      	mov	r4, r2
 80037ce:	461d      	mov	r5, r3
 80037d0:	4643      	mov	r3, r8
 80037d2:	18e3      	adds	r3, r4, r3
 80037d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037d8:	464b      	mov	r3, r9
 80037da:	eb45 0303 	adc.w	r3, r5, r3
 80037de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037fe:	4629      	mov	r1, r5
 8003800:	008b      	lsls	r3, r1, #2
 8003802:	4621      	mov	r1, r4
 8003804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003808:	4621      	mov	r1, r4
 800380a:	008a      	lsls	r2, r1, #2
 800380c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003810:	f7fc fda6 	bl	8000360 <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4b60      	ldr	r3, [pc, #384]	; (800399c <UART_SetConfig+0x4e4>)
 800381a:	fba3 2302 	umull	r2, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	011c      	lsls	r4, r3, #4
 8003822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800382c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003834:	4642      	mov	r2, r8
 8003836:	464b      	mov	r3, r9
 8003838:	1891      	adds	r1, r2, r2
 800383a:	61b9      	str	r1, [r7, #24]
 800383c:	415b      	adcs	r3, r3
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003844:	4641      	mov	r1, r8
 8003846:	1851      	adds	r1, r2, r1
 8003848:	6139      	str	r1, [r7, #16]
 800384a:	4649      	mov	r1, r9
 800384c:	414b      	adcs	r3, r1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800385c:	4659      	mov	r1, fp
 800385e:	00cb      	lsls	r3, r1, #3
 8003860:	4651      	mov	r1, sl
 8003862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003866:	4651      	mov	r1, sl
 8003868:	00ca      	lsls	r2, r1, #3
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	4603      	mov	r3, r0
 8003870:	4642      	mov	r2, r8
 8003872:	189b      	adds	r3, r3, r2
 8003874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003878:	464b      	mov	r3, r9
 800387a:	460a      	mov	r2, r1
 800387c:	eb42 0303 	adc.w	r3, r2, r3
 8003880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	67bb      	str	r3, [r7, #120]	; 0x78
 800388e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800389c:	4649      	mov	r1, r9
 800389e:	008b      	lsls	r3, r1, #2
 80038a0:	4641      	mov	r1, r8
 80038a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a6:	4641      	mov	r1, r8
 80038a8:	008a      	lsls	r2, r1, #2
 80038aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038ae:	f7fc fd57 	bl	8000360 <__aeabi_uldivmod>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4611      	mov	r1, r2
 80038b8:	4b38      	ldr	r3, [pc, #224]	; (800399c <UART_SetConfig+0x4e4>)
 80038ba:	fba3 2301 	umull	r2, r3, r3, r1
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	2264      	movs	r2, #100	; 0x64
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	1acb      	subs	r3, r1, r3
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	3332      	adds	r3, #50	; 0x32
 80038cc:	4a33      	ldr	r2, [pc, #204]	; (800399c <UART_SetConfig+0x4e4>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d8:	441c      	add	r4, r3
 80038da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038de:	2200      	movs	r2, #0
 80038e0:	673b      	str	r3, [r7, #112]	; 0x70
 80038e2:	677a      	str	r2, [r7, #116]	; 0x74
 80038e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	415b      	adcs	r3, r3
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038f8:	4641      	mov	r1, r8
 80038fa:	1851      	adds	r1, r2, r1
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	4649      	mov	r1, r9
 8003900:	414b      	adcs	r3, r1
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003910:	4659      	mov	r1, fp
 8003912:	00cb      	lsls	r3, r1, #3
 8003914:	4651      	mov	r1, sl
 8003916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391a:	4651      	mov	r1, sl
 800391c:	00ca      	lsls	r2, r1, #3
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	4603      	mov	r3, r0
 8003924:	4642      	mov	r2, r8
 8003926:	189b      	adds	r3, r3, r2
 8003928:	66bb      	str	r3, [r7, #104]	; 0x68
 800392a:	464b      	mov	r3, r9
 800392c:	460a      	mov	r2, r1
 800392e:	eb42 0303 	adc.w	r3, r2, r3
 8003932:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	663b      	str	r3, [r7, #96]	; 0x60
 800393e:	667a      	str	r2, [r7, #100]	; 0x64
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800394c:	4649      	mov	r1, r9
 800394e:	008b      	lsls	r3, r1, #2
 8003950:	4641      	mov	r1, r8
 8003952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003956:	4641      	mov	r1, r8
 8003958:	008a      	lsls	r2, r1, #2
 800395a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800395e:	f7fc fcff 	bl	8000360 <__aeabi_uldivmod>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <UART_SetConfig+0x4e4>)
 8003968:	fba3 1302 	umull	r1, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	2164      	movs	r1, #100	; 0x64
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	3332      	adds	r3, #50	; 0x32
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <UART_SetConfig+0x4e4>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	f003 020f 	and.w	r2, r3, #15
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4422      	add	r2, r4
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	bf00      	nop
 8003992:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003996:	46bd      	mov	sp, r7
 8003998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399c:	51eb851f 	.word	0x51eb851f

080039a0 <siprintf>:
 80039a0:	b40e      	push	{r1, r2, r3}
 80039a2:	b500      	push	{lr}
 80039a4:	b09c      	sub	sp, #112	; 0x70
 80039a6:	ab1d      	add	r3, sp, #116	; 0x74
 80039a8:	9002      	str	r0, [sp, #8]
 80039aa:	9006      	str	r0, [sp, #24]
 80039ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039b0:	4809      	ldr	r0, [pc, #36]	; (80039d8 <siprintf+0x38>)
 80039b2:	9107      	str	r1, [sp, #28]
 80039b4:	9104      	str	r1, [sp, #16]
 80039b6:	4909      	ldr	r1, [pc, #36]	; (80039dc <siprintf+0x3c>)
 80039b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039bc:	9105      	str	r1, [sp, #20]
 80039be:	6800      	ldr	r0, [r0, #0]
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	a902      	add	r1, sp, #8
 80039c4:	f000 f992 	bl	8003cec <_svfiprintf_r>
 80039c8:	9b02      	ldr	r3, [sp, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	b01c      	add	sp, #112	; 0x70
 80039d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039d4:	b003      	add	sp, #12
 80039d6:	4770      	bx	lr
 80039d8:	20000058 	.word	0x20000058
 80039dc:	ffff0208 	.word	0xffff0208

080039e0 <memset>:
 80039e0:	4402      	add	r2, r0
 80039e2:	4603      	mov	r3, r0
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d100      	bne.n	80039ea <memset+0xa>
 80039e8:	4770      	bx	lr
 80039ea:	f803 1b01 	strb.w	r1, [r3], #1
 80039ee:	e7f9      	b.n	80039e4 <memset+0x4>

080039f0 <__errno>:
 80039f0:	4b01      	ldr	r3, [pc, #4]	; (80039f8 <__errno+0x8>)
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000058 	.word	0x20000058

080039fc <__libc_init_array>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4d0d      	ldr	r5, [pc, #52]	; (8003a34 <__libc_init_array+0x38>)
 8003a00:	4c0d      	ldr	r4, [pc, #52]	; (8003a38 <__libc_init_array+0x3c>)
 8003a02:	1b64      	subs	r4, r4, r5
 8003a04:	10a4      	asrs	r4, r4, #2
 8003a06:	2600      	movs	r6, #0
 8003a08:	42a6      	cmp	r6, r4
 8003a0a:	d109      	bne.n	8003a20 <__libc_init_array+0x24>
 8003a0c:	4d0b      	ldr	r5, [pc, #44]	; (8003a3c <__libc_init_array+0x40>)
 8003a0e:	4c0c      	ldr	r4, [pc, #48]	; (8003a40 <__libc_init_array+0x44>)
 8003a10:	f000 fc6a 	bl	80042e8 <_init>
 8003a14:	1b64      	subs	r4, r4, r5
 8003a16:	10a4      	asrs	r4, r4, #2
 8003a18:	2600      	movs	r6, #0
 8003a1a:	42a6      	cmp	r6, r4
 8003a1c:	d105      	bne.n	8003a2a <__libc_init_array+0x2e>
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a24:	4798      	blx	r3
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7ee      	b.n	8003a08 <__libc_init_array+0xc>
 8003a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2e:	4798      	blx	r3
 8003a30:	3601      	adds	r6, #1
 8003a32:	e7f2      	b.n	8003a1a <__libc_init_array+0x1e>
 8003a34:	0800437c 	.word	0x0800437c
 8003a38:	0800437c 	.word	0x0800437c
 8003a3c:	0800437c 	.word	0x0800437c
 8003a40:	08004380 	.word	0x08004380

08003a44 <__retarget_lock_acquire_recursive>:
 8003a44:	4770      	bx	lr

08003a46 <__retarget_lock_release_recursive>:
 8003a46:	4770      	bx	lr

08003a48 <_free_r>:
 8003a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a4a:	2900      	cmp	r1, #0
 8003a4c:	d044      	beq.n	8003ad8 <_free_r+0x90>
 8003a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a52:	9001      	str	r0, [sp, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f1a1 0404 	sub.w	r4, r1, #4
 8003a5a:	bfb8      	it	lt
 8003a5c:	18e4      	addlt	r4, r4, r3
 8003a5e:	f000 f8df 	bl	8003c20 <__malloc_lock>
 8003a62:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <_free_r+0x94>)
 8003a64:	9801      	ldr	r0, [sp, #4]
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	b933      	cbnz	r3, 8003a78 <_free_r+0x30>
 8003a6a:	6063      	str	r3, [r4, #4]
 8003a6c:	6014      	str	r4, [r2, #0]
 8003a6e:	b003      	add	sp, #12
 8003a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a74:	f000 b8da 	b.w	8003c2c <__malloc_unlock>
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	d908      	bls.n	8003a8e <_free_r+0x46>
 8003a7c:	6825      	ldr	r5, [r4, #0]
 8003a7e:	1961      	adds	r1, r4, r5
 8003a80:	428b      	cmp	r3, r1
 8003a82:	bf01      	itttt	eq
 8003a84:	6819      	ldreq	r1, [r3, #0]
 8003a86:	685b      	ldreq	r3, [r3, #4]
 8003a88:	1949      	addeq	r1, r1, r5
 8003a8a:	6021      	streq	r1, [r4, #0]
 8003a8c:	e7ed      	b.n	8003a6a <_free_r+0x22>
 8003a8e:	461a      	mov	r2, r3
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	b10b      	cbz	r3, 8003a98 <_free_r+0x50>
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	d9fa      	bls.n	8003a8e <_free_r+0x46>
 8003a98:	6811      	ldr	r1, [r2, #0]
 8003a9a:	1855      	adds	r5, r2, r1
 8003a9c:	42a5      	cmp	r5, r4
 8003a9e:	d10b      	bne.n	8003ab8 <_free_r+0x70>
 8003aa0:	6824      	ldr	r4, [r4, #0]
 8003aa2:	4421      	add	r1, r4
 8003aa4:	1854      	adds	r4, r2, r1
 8003aa6:	42a3      	cmp	r3, r4
 8003aa8:	6011      	str	r1, [r2, #0]
 8003aaa:	d1e0      	bne.n	8003a6e <_free_r+0x26>
 8003aac:	681c      	ldr	r4, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	6053      	str	r3, [r2, #4]
 8003ab2:	440c      	add	r4, r1
 8003ab4:	6014      	str	r4, [r2, #0]
 8003ab6:	e7da      	b.n	8003a6e <_free_r+0x26>
 8003ab8:	d902      	bls.n	8003ac0 <_free_r+0x78>
 8003aba:	230c      	movs	r3, #12
 8003abc:	6003      	str	r3, [r0, #0]
 8003abe:	e7d6      	b.n	8003a6e <_free_r+0x26>
 8003ac0:	6825      	ldr	r5, [r4, #0]
 8003ac2:	1961      	adds	r1, r4, r5
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	bf04      	itt	eq
 8003ac8:	6819      	ldreq	r1, [r3, #0]
 8003aca:	685b      	ldreq	r3, [r3, #4]
 8003acc:	6063      	str	r3, [r4, #4]
 8003ace:	bf04      	itt	eq
 8003ad0:	1949      	addeq	r1, r1, r5
 8003ad2:	6021      	streq	r1, [r4, #0]
 8003ad4:	6054      	str	r4, [r2, #4]
 8003ad6:	e7ca      	b.n	8003a6e <_free_r+0x26>
 8003ad8:	b003      	add	sp, #12
 8003ada:	bd30      	pop	{r4, r5, pc}
 8003adc:	20000258 	.word	0x20000258

08003ae0 <sbrk_aligned>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	4e0e      	ldr	r6, [pc, #56]	; (8003b1c <sbrk_aligned+0x3c>)
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	6831      	ldr	r1, [r6, #0]
 8003ae8:	4605      	mov	r5, r0
 8003aea:	b911      	cbnz	r1, 8003af2 <sbrk_aligned+0x12>
 8003aec:	f000 fba6 	bl	800423c <_sbrk_r>
 8003af0:	6030      	str	r0, [r6, #0]
 8003af2:	4621      	mov	r1, r4
 8003af4:	4628      	mov	r0, r5
 8003af6:	f000 fba1 	bl	800423c <_sbrk_r>
 8003afa:	1c43      	adds	r3, r0, #1
 8003afc:	d00a      	beq.n	8003b14 <sbrk_aligned+0x34>
 8003afe:	1cc4      	adds	r4, r0, #3
 8003b00:	f024 0403 	bic.w	r4, r4, #3
 8003b04:	42a0      	cmp	r0, r4
 8003b06:	d007      	beq.n	8003b18 <sbrk_aligned+0x38>
 8003b08:	1a21      	subs	r1, r4, r0
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f000 fb96 	bl	800423c <_sbrk_r>
 8003b10:	3001      	adds	r0, #1
 8003b12:	d101      	bne.n	8003b18 <sbrk_aligned+0x38>
 8003b14:	f04f 34ff 	mov.w	r4, #4294967295
 8003b18:	4620      	mov	r0, r4
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	2000025c 	.word	0x2000025c

08003b20 <_malloc_r>:
 8003b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b24:	1ccd      	adds	r5, r1, #3
 8003b26:	f025 0503 	bic.w	r5, r5, #3
 8003b2a:	3508      	adds	r5, #8
 8003b2c:	2d0c      	cmp	r5, #12
 8003b2e:	bf38      	it	cc
 8003b30:	250c      	movcc	r5, #12
 8003b32:	2d00      	cmp	r5, #0
 8003b34:	4607      	mov	r7, r0
 8003b36:	db01      	blt.n	8003b3c <_malloc_r+0x1c>
 8003b38:	42a9      	cmp	r1, r5
 8003b3a:	d905      	bls.n	8003b48 <_malloc_r+0x28>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	2600      	movs	r6, #0
 8003b42:	4630      	mov	r0, r6
 8003b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c1c <_malloc_r+0xfc>
 8003b4c:	f000 f868 	bl	8003c20 <__malloc_lock>
 8003b50:	f8d8 3000 	ldr.w	r3, [r8]
 8003b54:	461c      	mov	r4, r3
 8003b56:	bb5c      	cbnz	r4, 8003bb0 <_malloc_r+0x90>
 8003b58:	4629      	mov	r1, r5
 8003b5a:	4638      	mov	r0, r7
 8003b5c:	f7ff ffc0 	bl	8003ae0 <sbrk_aligned>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	4604      	mov	r4, r0
 8003b64:	d155      	bne.n	8003c12 <_malloc_r+0xf2>
 8003b66:	f8d8 4000 	ldr.w	r4, [r8]
 8003b6a:	4626      	mov	r6, r4
 8003b6c:	2e00      	cmp	r6, #0
 8003b6e:	d145      	bne.n	8003bfc <_malloc_r+0xdc>
 8003b70:	2c00      	cmp	r4, #0
 8003b72:	d048      	beq.n	8003c06 <_malloc_r+0xe6>
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	4631      	mov	r1, r6
 8003b78:	4638      	mov	r0, r7
 8003b7a:	eb04 0903 	add.w	r9, r4, r3
 8003b7e:	f000 fb5d 	bl	800423c <_sbrk_r>
 8003b82:	4581      	cmp	r9, r0
 8003b84:	d13f      	bne.n	8003c06 <_malloc_r+0xe6>
 8003b86:	6821      	ldr	r1, [r4, #0]
 8003b88:	1a6d      	subs	r5, r5, r1
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	f7ff ffa7 	bl	8003ae0 <sbrk_aligned>
 8003b92:	3001      	adds	r0, #1
 8003b94:	d037      	beq.n	8003c06 <_malloc_r+0xe6>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	442b      	add	r3, r5
 8003b9a:	6023      	str	r3, [r4, #0]
 8003b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d038      	beq.n	8003c16 <_malloc_r+0xf6>
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	42a2      	cmp	r2, r4
 8003ba8:	d12b      	bne.n	8003c02 <_malloc_r+0xe2>
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e00f      	b.n	8003bd0 <_malloc_r+0xb0>
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	1b52      	subs	r2, r2, r5
 8003bb4:	d41f      	bmi.n	8003bf6 <_malloc_r+0xd6>
 8003bb6:	2a0b      	cmp	r2, #11
 8003bb8:	d917      	bls.n	8003bea <_malloc_r+0xca>
 8003bba:	1961      	adds	r1, r4, r5
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	6025      	str	r5, [r4, #0]
 8003bc0:	bf18      	it	ne
 8003bc2:	6059      	strne	r1, [r3, #4]
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	bf08      	it	eq
 8003bc8:	f8c8 1000 	streq.w	r1, [r8]
 8003bcc:	5162      	str	r2, [r4, r5]
 8003bce:	604b      	str	r3, [r1, #4]
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	f104 060b 	add.w	r6, r4, #11
 8003bd6:	f000 f829 	bl	8003c2c <__malloc_unlock>
 8003bda:	f026 0607 	bic.w	r6, r6, #7
 8003bde:	1d23      	adds	r3, r4, #4
 8003be0:	1af2      	subs	r2, r6, r3
 8003be2:	d0ae      	beq.n	8003b42 <_malloc_r+0x22>
 8003be4:	1b9b      	subs	r3, r3, r6
 8003be6:	50a3      	str	r3, [r4, r2]
 8003be8:	e7ab      	b.n	8003b42 <_malloc_r+0x22>
 8003bea:	42a3      	cmp	r3, r4
 8003bec:	6862      	ldr	r2, [r4, #4]
 8003bee:	d1dd      	bne.n	8003bac <_malloc_r+0x8c>
 8003bf0:	f8c8 2000 	str.w	r2, [r8]
 8003bf4:	e7ec      	b.n	8003bd0 <_malloc_r+0xb0>
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	6864      	ldr	r4, [r4, #4]
 8003bfa:	e7ac      	b.n	8003b56 <_malloc_r+0x36>
 8003bfc:	4634      	mov	r4, r6
 8003bfe:	6876      	ldr	r6, [r6, #4]
 8003c00:	e7b4      	b.n	8003b6c <_malloc_r+0x4c>
 8003c02:	4613      	mov	r3, r2
 8003c04:	e7cc      	b.n	8003ba0 <_malloc_r+0x80>
 8003c06:	230c      	movs	r3, #12
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f000 f80e 	bl	8003c2c <__malloc_unlock>
 8003c10:	e797      	b.n	8003b42 <_malloc_r+0x22>
 8003c12:	6025      	str	r5, [r4, #0]
 8003c14:	e7dc      	b.n	8003bd0 <_malloc_r+0xb0>
 8003c16:	605b      	str	r3, [r3, #4]
 8003c18:	deff      	udf	#255	; 0xff
 8003c1a:	bf00      	nop
 8003c1c:	20000258 	.word	0x20000258

08003c20 <__malloc_lock>:
 8003c20:	4801      	ldr	r0, [pc, #4]	; (8003c28 <__malloc_lock+0x8>)
 8003c22:	f7ff bf0f 	b.w	8003a44 <__retarget_lock_acquire_recursive>
 8003c26:	bf00      	nop
 8003c28:	20000254 	.word	0x20000254

08003c2c <__malloc_unlock>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	; (8003c34 <__malloc_unlock+0x8>)
 8003c2e:	f7ff bf0a 	b.w	8003a46 <__retarget_lock_release_recursive>
 8003c32:	bf00      	nop
 8003c34:	20000254 	.word	0x20000254

08003c38 <__ssputs_r>:
 8003c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c3c:	688e      	ldr	r6, [r1, #8]
 8003c3e:	461f      	mov	r7, r3
 8003c40:	42be      	cmp	r6, r7
 8003c42:	680b      	ldr	r3, [r1, #0]
 8003c44:	4682      	mov	sl, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	4690      	mov	r8, r2
 8003c4a:	d82c      	bhi.n	8003ca6 <__ssputs_r+0x6e>
 8003c4c:	898a      	ldrh	r2, [r1, #12]
 8003c4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c52:	d026      	beq.n	8003ca2 <__ssputs_r+0x6a>
 8003c54:	6965      	ldr	r5, [r4, #20]
 8003c56:	6909      	ldr	r1, [r1, #16]
 8003c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c5c:	eba3 0901 	sub.w	r9, r3, r1
 8003c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c64:	1c7b      	adds	r3, r7, #1
 8003c66:	444b      	add	r3, r9
 8003c68:	106d      	asrs	r5, r5, #1
 8003c6a:	429d      	cmp	r5, r3
 8003c6c:	bf38      	it	cc
 8003c6e:	461d      	movcc	r5, r3
 8003c70:	0553      	lsls	r3, r2, #21
 8003c72:	d527      	bpl.n	8003cc4 <__ssputs_r+0x8c>
 8003c74:	4629      	mov	r1, r5
 8003c76:	f7ff ff53 	bl	8003b20 <_malloc_r>
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	b360      	cbz	r0, 8003cd8 <__ssputs_r+0xa0>
 8003c7e:	6921      	ldr	r1, [r4, #16]
 8003c80:	464a      	mov	r2, r9
 8003c82:	f000 faeb 	bl	800425c <memcpy>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c90:	81a3      	strh	r3, [r4, #12]
 8003c92:	6126      	str	r6, [r4, #16]
 8003c94:	6165      	str	r5, [r4, #20]
 8003c96:	444e      	add	r6, r9
 8003c98:	eba5 0509 	sub.w	r5, r5, r9
 8003c9c:	6026      	str	r6, [r4, #0]
 8003c9e:	60a5      	str	r5, [r4, #8]
 8003ca0:	463e      	mov	r6, r7
 8003ca2:	42be      	cmp	r6, r7
 8003ca4:	d900      	bls.n	8003ca8 <__ssputs_r+0x70>
 8003ca6:	463e      	mov	r6, r7
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	4632      	mov	r2, r6
 8003cac:	4641      	mov	r1, r8
 8003cae:	f000 faab 	bl	8004208 <memmove>
 8003cb2:	68a3      	ldr	r3, [r4, #8]
 8003cb4:	1b9b      	subs	r3, r3, r6
 8003cb6:	60a3      	str	r3, [r4, #8]
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	4433      	add	r3, r6
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc4:	462a      	mov	r2, r5
 8003cc6:	f000 fad7 	bl	8004278 <_realloc_r>
 8003cca:	4606      	mov	r6, r0
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d1e0      	bne.n	8003c92 <__ssputs_r+0x5a>
 8003cd0:	6921      	ldr	r1, [r4, #16]
 8003cd2:	4650      	mov	r0, sl
 8003cd4:	f7ff feb8 	bl	8003a48 <_free_r>
 8003cd8:	230c      	movs	r3, #12
 8003cda:	f8ca 3000 	str.w	r3, [sl]
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	e7e9      	b.n	8003cc0 <__ssputs_r+0x88>

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	b09d      	sub	sp, #116	; 0x74
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460d      	mov	r5, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	d50e      	bpl.n	8003d1e <_svfiprintf_r+0x32>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b963      	cbnz	r3, 8003d1e <_svfiprintf_r+0x32>
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	f7ff ff0b 	bl	8003b20 <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b920      	cbnz	r0, 8003d1a <_svfiprintf_r+0x2e>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	e0d0      	b.n	8003ebc <_svfiprintf_r+0x1d0>
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	616b      	str	r3, [r5, #20]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	2320      	movs	r3, #32
 8003d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d2c:	2330      	movs	r3, #48	; 0x30
 8003d2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ed4 <_svfiprintf_r+0x1e8>
 8003d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d36:	f04f 0901 	mov.w	r9, #1
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	469a      	mov	sl, r3
 8003d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d42:	b10a      	cbz	r2, 8003d48 <_svfiprintf_r+0x5c>
 8003d44:	2a25      	cmp	r2, #37	; 0x25
 8003d46:	d1f9      	bne.n	8003d3c <_svfiprintf_r+0x50>
 8003d48:	ebba 0b04 	subs.w	fp, sl, r4
 8003d4c:	d00b      	beq.n	8003d66 <_svfiprintf_r+0x7a>
 8003d4e:	465b      	mov	r3, fp
 8003d50:	4622      	mov	r2, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff ff6f 	bl	8003c38 <__ssputs_r>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	f000 80a9 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d62:	445a      	add	r2, fp
 8003d64:	9209      	str	r2, [sp, #36]	; 0x24
 8003d66:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a1 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d70:	2300      	movs	r3, #0
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295
 8003d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7a:	f10a 0a01 	add.w	sl, sl, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	9307      	str	r3, [sp, #28]
 8003d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d86:	931a      	str	r3, [sp, #104]	; 0x68
 8003d88:	4654      	mov	r4, sl
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d90:	4850      	ldr	r0, [pc, #320]	; (8003ed4 <_svfiprintf_r+0x1e8>)
 8003d92:	f7fc fa45 	bl	8000220 <memchr>
 8003d96:	9a04      	ldr	r2, [sp, #16]
 8003d98:	b9d8      	cbnz	r0, 8003dd2 <_svfiprintf_r+0xe6>
 8003d9a:	06d0      	lsls	r0, r2, #27
 8003d9c:	bf44      	itt	mi
 8003d9e:	2320      	movmi	r3, #32
 8003da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da4:	0711      	lsls	r1, r2, #28
 8003da6:	bf44      	itt	mi
 8003da8:	232b      	movmi	r3, #43	; 0x2b
 8003daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dae:	f89a 3000 	ldrb.w	r3, [sl]
 8003db2:	2b2a      	cmp	r3, #42	; 0x2a
 8003db4:	d015      	beq.n	8003de2 <_svfiprintf_r+0xf6>
 8003db6:	9a07      	ldr	r2, [sp, #28]
 8003db8:	4654      	mov	r4, sl
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f04f 0c0a 	mov.w	ip, #10
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dc6:	3b30      	subs	r3, #48	; 0x30
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	d94d      	bls.n	8003e68 <_svfiprintf_r+0x17c>
 8003dcc:	b1b0      	cbz	r0, 8003dfc <_svfiprintf_r+0x110>
 8003dce:	9207      	str	r2, [sp, #28]
 8003dd0:	e014      	b.n	8003dfc <_svfiprintf_r+0x110>
 8003dd2:	eba0 0308 	sub.w	r3, r0, r8
 8003dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	46a2      	mov	sl, r4
 8003de0:	e7d2      	b.n	8003d88 <_svfiprintf_r+0x9c>
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	1d19      	adds	r1, r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	9103      	str	r1, [sp, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfbb      	ittet	lt
 8003dee:	425b      	neglt	r3, r3
 8003df0:	f042 0202 	orrlt.w	r2, r2, #2
 8003df4:	9307      	strge	r3, [sp, #28]
 8003df6:	9307      	strlt	r3, [sp, #28]
 8003df8:	bfb8      	it	lt
 8003dfa:	9204      	strlt	r2, [sp, #16]
 8003dfc:	7823      	ldrb	r3, [r4, #0]
 8003dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003e00:	d10c      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e02:	7863      	ldrb	r3, [r4, #1]
 8003e04:	2b2a      	cmp	r3, #42	; 0x2a
 8003e06:	d134      	bne.n	8003e72 <_svfiprintf_r+0x186>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	1d1a      	adds	r2, r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	9203      	str	r2, [sp, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bfb8      	it	lt
 8003e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e18:	3402      	adds	r4, #2
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ee4 <_svfiprintf_r+0x1f8>
 8003e20:	7821      	ldrb	r1, [r4, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	4650      	mov	r0, sl
 8003e26:	f7fc f9fb 	bl	8000220 <memchr>
 8003e2a:	b138      	cbz	r0, 8003e3c <_svfiprintf_r+0x150>
 8003e2c:	9b04      	ldr	r3, [sp, #16]
 8003e2e:	eba0 000a 	sub.w	r0, r0, sl
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	4082      	lsls	r2, r0
 8003e36:	4313      	orrs	r3, r2
 8003e38:	3401      	adds	r4, #1
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	4825      	ldr	r0, [pc, #148]	; (8003ed8 <_svfiprintf_r+0x1ec>)
 8003e42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e46:	2206      	movs	r2, #6
 8003e48:	f7fc f9ea 	bl	8000220 <memchr>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d038      	beq.n	8003ec2 <_svfiprintf_r+0x1d6>
 8003e50:	4b22      	ldr	r3, [pc, #136]	; (8003edc <_svfiprintf_r+0x1f0>)
 8003e52:	bb1b      	cbnz	r3, 8003e9c <_svfiprintf_r+0x1b0>
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	3307      	adds	r3, #7
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	9303      	str	r3, [sp, #12]
 8003e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e62:	4433      	add	r3, r6
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	e768      	b.n	8003d3a <_svfiprintf_r+0x4e>
 8003e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	2001      	movs	r0, #1
 8003e70:	e7a6      	b.n	8003dc0 <_svfiprintf_r+0xd4>
 8003e72:	2300      	movs	r3, #0
 8003e74:	3401      	adds	r4, #1
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f04f 0c0a 	mov.w	ip, #10
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e84:	3a30      	subs	r2, #48	; 0x30
 8003e86:	2a09      	cmp	r2, #9
 8003e88:	d903      	bls.n	8003e92 <_svfiprintf_r+0x1a6>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0c6      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e8e:	9105      	str	r1, [sp, #20]
 8003e90:	e7c4      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e96:	4604      	mov	r4, r0
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e7f0      	b.n	8003e7e <_svfiprintf_r+0x192>
 8003e9c:	ab03      	add	r3, sp, #12
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <_svfiprintf_r+0x1f4>)
 8003ea4:	a904      	add	r1, sp, #16
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	f3af 8000 	nop.w
 8003eac:	1c42      	adds	r2, r0, #1
 8003eae:	4606      	mov	r6, r0
 8003eb0:	d1d6      	bne.n	8003e60 <_svfiprintf_r+0x174>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	065b      	lsls	r3, r3, #25
 8003eb6:	f53f af2d 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003eba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ebc:	b01d      	add	sp, #116	; 0x74
 8003ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec2:	ab03      	add	r3, sp, #12
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	462a      	mov	r2, r5
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <_svfiprintf_r+0x1f4>)
 8003eca:	a904      	add	r1, sp, #16
 8003ecc:	4638      	mov	r0, r7
 8003ece:	f000 f879 	bl	8003fc4 <_printf_i>
 8003ed2:	e7eb      	b.n	8003eac <_svfiprintf_r+0x1c0>
 8003ed4:	08004340 	.word	0x08004340
 8003ed8:	0800434a 	.word	0x0800434a
 8003edc:	00000000 	.word	0x00000000
 8003ee0:	08003c39 	.word	0x08003c39
 8003ee4:	08004346 	.word	0x08004346

08003ee8 <_printf_common>:
 8003ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eec:	4616      	mov	r6, r2
 8003eee:	4699      	mov	r9, r3
 8003ef0:	688a      	ldr	r2, [r1, #8]
 8003ef2:	690b      	ldr	r3, [r1, #16]
 8003ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	bfb8      	it	lt
 8003efc:	4613      	movlt	r3, r2
 8003efe:	6033      	str	r3, [r6, #0]
 8003f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f04:	4607      	mov	r7, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	b10a      	cbz	r2, 8003f0e <_printf_common+0x26>
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	0699      	lsls	r1, r3, #26
 8003f12:	bf42      	ittt	mi
 8003f14:	6833      	ldrmi	r3, [r6, #0]
 8003f16:	3302      	addmi	r3, #2
 8003f18:	6033      	strmi	r3, [r6, #0]
 8003f1a:	6825      	ldr	r5, [r4, #0]
 8003f1c:	f015 0506 	ands.w	r5, r5, #6
 8003f20:	d106      	bne.n	8003f30 <_printf_common+0x48>
 8003f22:	f104 0a19 	add.w	sl, r4, #25
 8003f26:	68e3      	ldr	r3, [r4, #12]
 8003f28:	6832      	ldr	r2, [r6, #0]
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	42ab      	cmp	r3, r5
 8003f2e:	dc26      	bgt.n	8003f7e <_printf_common+0x96>
 8003f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f34:	1e13      	subs	r3, r2, #0
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	bf18      	it	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	0692      	lsls	r2, r2, #26
 8003f3e:	d42b      	bmi.n	8003f98 <_printf_common+0xb0>
 8003f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f44:	4649      	mov	r1, r9
 8003f46:	4638      	mov	r0, r7
 8003f48:	47c0      	blx	r8
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d01e      	beq.n	8003f8c <_printf_common+0xa4>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	6922      	ldr	r2, [r4, #16]
 8003f52:	f003 0306 	and.w	r3, r3, #6
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf02      	ittt	eq
 8003f5a:	68e5      	ldreq	r5, [r4, #12]
 8003f5c:	6833      	ldreq	r3, [r6, #0]
 8003f5e:	1aed      	subeq	r5, r5, r3
 8003f60:	68a3      	ldr	r3, [r4, #8]
 8003f62:	bf0c      	ite	eq
 8003f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f68:	2500      	movne	r5, #0
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	bfc4      	itt	gt
 8003f6e:	1a9b      	subgt	r3, r3, r2
 8003f70:	18ed      	addgt	r5, r5, r3
 8003f72:	2600      	movs	r6, #0
 8003f74:	341a      	adds	r4, #26
 8003f76:	42b5      	cmp	r5, r6
 8003f78:	d11a      	bne.n	8003fb0 <_printf_common+0xc8>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e008      	b.n	8003f90 <_printf_common+0xa8>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4649      	mov	r1, r9
 8003f84:	4638      	mov	r0, r7
 8003f86:	47c0      	blx	r8
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d103      	bne.n	8003f94 <_printf_common+0xac>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f94:	3501      	adds	r5, #1
 8003f96:	e7c6      	b.n	8003f26 <_printf_common+0x3e>
 8003f98:	18e1      	adds	r1, r4, r3
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	2030      	movs	r0, #48	; 0x30
 8003f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa2:	4422      	add	r2, r4
 8003fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fac:	3302      	adds	r3, #2
 8003fae:	e7c7      	b.n	8003f40 <_printf_common+0x58>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	47c0      	blx	r8
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0e6      	beq.n	8003f8c <_printf_common+0xa4>
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7d9      	b.n	8003f76 <_printf_common+0x8e>
	...

08003fc4 <_printf_i>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	7e0f      	ldrb	r7, [r1, #24]
 8003fca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fcc:	2f78      	cmp	r7, #120	; 0x78
 8003fce:	4691      	mov	r9, r2
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	469a      	mov	sl, r3
 8003fd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fda:	d807      	bhi.n	8003fec <_printf_i+0x28>
 8003fdc:	2f62      	cmp	r7, #98	; 0x62
 8003fde:	d80a      	bhi.n	8003ff6 <_printf_i+0x32>
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	f000 80d4 	beq.w	800418e <_printf_i+0x1ca>
 8003fe6:	2f58      	cmp	r7, #88	; 0x58
 8003fe8:	f000 80c0 	beq.w	800416c <_printf_i+0x1a8>
 8003fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff4:	e03a      	b.n	800406c <_printf_i+0xa8>
 8003ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffa:	2b15      	cmp	r3, #21
 8003ffc:	d8f6      	bhi.n	8003fec <_printf_i+0x28>
 8003ffe:	a101      	add	r1, pc, #4	; (adr r1, 8004004 <_printf_i+0x40>)
 8004000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004071 	.word	0x08004071
 800400c:	08003fed 	.word	0x08003fed
 8004010:	08003fed 	.word	0x08003fed
 8004014:	08003fed 	.word	0x08003fed
 8004018:	08003fed 	.word	0x08003fed
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fed 	.word	0x08003fed
 8004024:	08003fed 	.word	0x08003fed
 8004028:	08003fed 	.word	0x08003fed
 800402c:	08003fed 	.word	0x08003fed
 8004030:	08004175 	.word	0x08004175
 8004034:	0800409d 	.word	0x0800409d
 8004038:	0800412f 	.word	0x0800412f
 800403c:	08003fed 	.word	0x08003fed
 8004040:	08003fed 	.word	0x08003fed
 8004044:	08004197 	.word	0x08004197
 8004048:	08003fed 	.word	0x08003fed
 800404c:	0800409d 	.word	0x0800409d
 8004050:	08003fed 	.word	0x08003fed
 8004054:	08003fed 	.word	0x08003fed
 8004058:	08004137 	.word	0x08004137
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	602a      	str	r2, [r5, #0]
 8004064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800406c:	2301      	movs	r3, #1
 800406e:	e09f      	b.n	80041b0 <_printf_i+0x1ec>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	682b      	ldr	r3, [r5, #0]
 8004074:	0607      	lsls	r7, r0, #24
 8004076:	f103 0104 	add.w	r1, r3, #4
 800407a:	6029      	str	r1, [r5, #0]
 800407c:	d501      	bpl.n	8004082 <_printf_i+0xbe>
 800407e:	681e      	ldr	r6, [r3, #0]
 8004080:	e003      	b.n	800408a <_printf_i+0xc6>
 8004082:	0646      	lsls	r6, r0, #25
 8004084:	d5fb      	bpl.n	800407e <_printf_i+0xba>
 8004086:	f9b3 6000 	ldrsh.w	r6, [r3]
 800408a:	2e00      	cmp	r6, #0
 800408c:	da03      	bge.n	8004096 <_printf_i+0xd2>
 800408e:	232d      	movs	r3, #45	; 0x2d
 8004090:	4276      	negs	r6, r6
 8004092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004096:	485a      	ldr	r0, [pc, #360]	; (8004200 <_printf_i+0x23c>)
 8004098:	230a      	movs	r3, #10
 800409a:	e012      	b.n	80040c2 <_printf_i+0xfe>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	1d19      	adds	r1, r3, #4
 80040a2:	6029      	str	r1, [r5, #0]
 80040a4:	0605      	lsls	r5, r0, #24
 80040a6:	d501      	bpl.n	80040ac <_printf_i+0xe8>
 80040a8:	681e      	ldr	r6, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <_printf_i+0xee>
 80040ac:	0641      	lsls	r1, r0, #25
 80040ae:	d5fb      	bpl.n	80040a8 <_printf_i+0xe4>
 80040b0:	881e      	ldrh	r6, [r3, #0]
 80040b2:	4853      	ldr	r0, [pc, #332]	; (8004200 <_printf_i+0x23c>)
 80040b4:	2f6f      	cmp	r7, #111	; 0x6f
 80040b6:	bf0c      	ite	eq
 80040b8:	2308      	moveq	r3, #8
 80040ba:	230a      	movne	r3, #10
 80040bc:	2100      	movs	r1, #0
 80040be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c2:	6865      	ldr	r5, [r4, #4]
 80040c4:	60a5      	str	r5, [r4, #8]
 80040c6:	2d00      	cmp	r5, #0
 80040c8:	bfa2      	ittt	ge
 80040ca:	6821      	ldrge	r1, [r4, #0]
 80040cc:	f021 0104 	bicge.w	r1, r1, #4
 80040d0:	6021      	strge	r1, [r4, #0]
 80040d2:	b90e      	cbnz	r6, 80040d8 <_printf_i+0x114>
 80040d4:	2d00      	cmp	r5, #0
 80040d6:	d04b      	beq.n	8004170 <_printf_i+0x1ac>
 80040d8:	4615      	mov	r5, r2
 80040da:	fbb6 f1f3 	udiv	r1, r6, r3
 80040de:	fb03 6711 	mls	r7, r3, r1, r6
 80040e2:	5dc7      	ldrb	r7, [r0, r7]
 80040e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040e8:	4637      	mov	r7, r6
 80040ea:	42bb      	cmp	r3, r7
 80040ec:	460e      	mov	r6, r1
 80040ee:	d9f4      	bls.n	80040da <_printf_i+0x116>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d10b      	bne.n	800410c <_printf_i+0x148>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	07de      	lsls	r6, r3, #31
 80040f8:	d508      	bpl.n	800410c <_printf_i+0x148>
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	6861      	ldr	r1, [r4, #4]
 80040fe:	4299      	cmp	r1, r3
 8004100:	bfde      	ittt	le
 8004102:	2330      	movle	r3, #48	; 0x30
 8004104:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800410c:	1b52      	subs	r2, r2, r5
 800410e:	6122      	str	r2, [r4, #16]
 8004110:	f8cd a000 	str.w	sl, [sp]
 8004114:	464b      	mov	r3, r9
 8004116:	aa03      	add	r2, sp, #12
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f7ff fee4 	bl	8003ee8 <_printf_common>
 8004120:	3001      	adds	r0, #1
 8004122:	d14a      	bne.n	80041ba <_printf_i+0x1f6>
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	b004      	add	sp, #16
 800412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	f043 0320 	orr.w	r3, r3, #32
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	4833      	ldr	r0, [pc, #204]	; (8004204 <_printf_i+0x240>)
 8004138:	2778      	movs	r7, #120	; 0x78
 800413a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	6829      	ldr	r1, [r5, #0]
 8004142:	061f      	lsls	r7, r3, #24
 8004144:	f851 6b04 	ldr.w	r6, [r1], #4
 8004148:	d402      	bmi.n	8004150 <_printf_i+0x18c>
 800414a:	065f      	lsls	r7, r3, #25
 800414c:	bf48      	it	mi
 800414e:	b2b6      	uxthmi	r6, r6
 8004150:	07df      	lsls	r7, r3, #31
 8004152:	bf48      	it	mi
 8004154:	f043 0320 	orrmi.w	r3, r3, #32
 8004158:	6029      	str	r1, [r5, #0]
 800415a:	bf48      	it	mi
 800415c:	6023      	strmi	r3, [r4, #0]
 800415e:	b91e      	cbnz	r6, 8004168 <_printf_i+0x1a4>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f023 0320 	bic.w	r3, r3, #32
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	2310      	movs	r3, #16
 800416a:	e7a7      	b.n	80040bc <_printf_i+0xf8>
 800416c:	4824      	ldr	r0, [pc, #144]	; (8004200 <_printf_i+0x23c>)
 800416e:	e7e4      	b.n	800413a <_printf_i+0x176>
 8004170:	4615      	mov	r5, r2
 8004172:	e7bd      	b.n	80040f0 <_printf_i+0x12c>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	6826      	ldr	r6, [r4, #0]
 8004178:	6961      	ldr	r1, [r4, #20]
 800417a:	1d18      	adds	r0, r3, #4
 800417c:	6028      	str	r0, [r5, #0]
 800417e:	0635      	lsls	r5, r6, #24
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	d501      	bpl.n	8004188 <_printf_i+0x1c4>
 8004184:	6019      	str	r1, [r3, #0]
 8004186:	e002      	b.n	800418e <_printf_i+0x1ca>
 8004188:	0670      	lsls	r0, r6, #25
 800418a:	d5fb      	bpl.n	8004184 <_printf_i+0x1c0>
 800418c:	8019      	strh	r1, [r3, #0]
 800418e:	2300      	movs	r3, #0
 8004190:	6123      	str	r3, [r4, #16]
 8004192:	4615      	mov	r5, r2
 8004194:	e7bc      	b.n	8004110 <_printf_i+0x14c>
 8004196:	682b      	ldr	r3, [r5, #0]
 8004198:	1d1a      	adds	r2, r3, #4
 800419a:	602a      	str	r2, [r5, #0]
 800419c:	681d      	ldr	r5, [r3, #0]
 800419e:	6862      	ldr	r2, [r4, #4]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4628      	mov	r0, r5
 80041a4:	f7fc f83c 	bl	8000220 <memchr>
 80041a8:	b108      	cbz	r0, 80041ae <_printf_i+0x1ea>
 80041aa:	1b40      	subs	r0, r0, r5
 80041ac:	6060      	str	r0, [r4, #4]
 80041ae:	6863      	ldr	r3, [r4, #4]
 80041b0:	6123      	str	r3, [r4, #16]
 80041b2:	2300      	movs	r3, #0
 80041b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b8:	e7aa      	b.n	8004110 <_printf_i+0x14c>
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	462a      	mov	r2, r5
 80041be:	4649      	mov	r1, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	47d0      	blx	sl
 80041c4:	3001      	adds	r0, #1
 80041c6:	d0ad      	beq.n	8004124 <_printf_i+0x160>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	079b      	lsls	r3, r3, #30
 80041cc:	d413      	bmi.n	80041f6 <_printf_i+0x232>
 80041ce:	68e0      	ldr	r0, [r4, #12]
 80041d0:	9b03      	ldr	r3, [sp, #12]
 80041d2:	4298      	cmp	r0, r3
 80041d4:	bfb8      	it	lt
 80041d6:	4618      	movlt	r0, r3
 80041d8:	e7a6      	b.n	8004128 <_printf_i+0x164>
 80041da:	2301      	movs	r3, #1
 80041dc:	4632      	mov	r2, r6
 80041de:	4649      	mov	r1, r9
 80041e0:	4640      	mov	r0, r8
 80041e2:	47d0      	blx	sl
 80041e4:	3001      	adds	r0, #1
 80041e6:	d09d      	beq.n	8004124 <_printf_i+0x160>
 80041e8:	3501      	adds	r5, #1
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	9903      	ldr	r1, [sp, #12]
 80041ee:	1a5b      	subs	r3, r3, r1
 80041f0:	42ab      	cmp	r3, r5
 80041f2:	dcf2      	bgt.n	80041da <_printf_i+0x216>
 80041f4:	e7eb      	b.n	80041ce <_printf_i+0x20a>
 80041f6:	2500      	movs	r5, #0
 80041f8:	f104 0619 	add.w	r6, r4, #25
 80041fc:	e7f5      	b.n	80041ea <_printf_i+0x226>
 80041fe:	bf00      	nop
 8004200:	08004351 	.word	0x08004351
 8004204:	08004362 	.word	0x08004362

08004208 <memmove>:
 8004208:	4288      	cmp	r0, r1
 800420a:	b510      	push	{r4, lr}
 800420c:	eb01 0402 	add.w	r4, r1, r2
 8004210:	d902      	bls.n	8004218 <memmove+0x10>
 8004212:	4284      	cmp	r4, r0
 8004214:	4623      	mov	r3, r4
 8004216:	d807      	bhi.n	8004228 <memmove+0x20>
 8004218:	1e43      	subs	r3, r0, #1
 800421a:	42a1      	cmp	r1, r4
 800421c:	d008      	beq.n	8004230 <memmove+0x28>
 800421e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004226:	e7f8      	b.n	800421a <memmove+0x12>
 8004228:	4402      	add	r2, r0
 800422a:	4601      	mov	r1, r0
 800422c:	428a      	cmp	r2, r1
 800422e:	d100      	bne.n	8004232 <memmove+0x2a>
 8004230:	bd10      	pop	{r4, pc}
 8004232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800423a:	e7f7      	b.n	800422c <memmove+0x24>

0800423c <_sbrk_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4d06      	ldr	r5, [pc, #24]	; (8004258 <_sbrk_r+0x1c>)
 8004240:	2300      	movs	r3, #0
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	f7fd f876 	bl	8001338 <_sbrk>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d102      	bne.n	8004256 <_sbrk_r+0x1a>
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	b103      	cbz	r3, 8004256 <_sbrk_r+0x1a>
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	20000250 	.word	0x20000250

0800425c <memcpy>:
 800425c:	440a      	add	r2, r1
 800425e:	4291      	cmp	r1, r2
 8004260:	f100 33ff 	add.w	r3, r0, #4294967295
 8004264:	d100      	bne.n	8004268 <memcpy+0xc>
 8004266:	4770      	bx	lr
 8004268:	b510      	push	{r4, lr}
 800426a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800426e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004272:	4291      	cmp	r1, r2
 8004274:	d1f9      	bne.n	800426a <memcpy+0xe>
 8004276:	bd10      	pop	{r4, pc}

08004278 <_realloc_r>:
 8004278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	4680      	mov	r8, r0
 800427e:	4614      	mov	r4, r2
 8004280:	460e      	mov	r6, r1
 8004282:	b921      	cbnz	r1, 800428e <_realloc_r+0x16>
 8004284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	4611      	mov	r1, r2
 800428a:	f7ff bc49 	b.w	8003b20 <_malloc_r>
 800428e:	b92a      	cbnz	r2, 800429c <_realloc_r+0x24>
 8004290:	f7ff fbda 	bl	8003a48 <_free_r>
 8004294:	4625      	mov	r5, r4
 8004296:	4628      	mov	r0, r5
 8004298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800429c:	f000 f81b 	bl	80042d6 <_malloc_usable_size_r>
 80042a0:	4284      	cmp	r4, r0
 80042a2:	4607      	mov	r7, r0
 80042a4:	d802      	bhi.n	80042ac <_realloc_r+0x34>
 80042a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042aa:	d812      	bhi.n	80042d2 <_realloc_r+0x5a>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4640      	mov	r0, r8
 80042b0:	f7ff fc36 	bl	8003b20 <_malloc_r>
 80042b4:	4605      	mov	r5, r0
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d0ed      	beq.n	8004296 <_realloc_r+0x1e>
 80042ba:	42bc      	cmp	r4, r7
 80042bc:	4622      	mov	r2, r4
 80042be:	4631      	mov	r1, r6
 80042c0:	bf28      	it	cs
 80042c2:	463a      	movcs	r2, r7
 80042c4:	f7ff ffca 	bl	800425c <memcpy>
 80042c8:	4631      	mov	r1, r6
 80042ca:	4640      	mov	r0, r8
 80042cc:	f7ff fbbc 	bl	8003a48 <_free_r>
 80042d0:	e7e1      	b.n	8004296 <_realloc_r+0x1e>
 80042d2:	4635      	mov	r5, r6
 80042d4:	e7df      	b.n	8004296 <_realloc_r+0x1e>

080042d6 <_malloc_usable_size_r>:
 80042d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042da:	1f18      	subs	r0, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bfbc      	itt	lt
 80042e0:	580b      	ldrlt	r3, [r1, r0]
 80042e2:	18c0      	addlt	r0, r0, r3
 80042e4:	4770      	bx	lr
	...

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
